MODULE NF

VAR
    model_id: 0..20;
    CCA_subject: {none, 1, 2, 3, 4, 5};
    nfInstanceId: {none, 1, 2, 3, 4, 5};
    nfType: {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    nfStatus: {none, REGISTERED, SUSPENDED, UNDISCOVERABLE};
    sNssais: array 1..2 of {none, 1, 2, 3};
    allowedNFTypes: array 1..2 of {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    allowedsNssais: array 1..2 of {none, 1, 2, 3};
    load: 0..10;
    capacity: 0..10;
    priority: 0..10;
    nfService1: NFService;
    nfService2: NFService;

DEFINE
    --all mandatory params should be valid
    isNFInstanceValid := 
        CCA_subject != none
        & nfInstanceId != none
        & CCA_subject = nfInstanceId -- TODO : Need double further check on CCA_subject
        & nfType != none
        & nfStatus = REGISTERED;
        
MODULE NFService

VAR
    allowedNFTypes: array 1..2 of {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    load: 0..10;
    capacity: 0..10;
    oauth2Required: boolean;
    priority: 0..10;
    serviceInstanceId: {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
    serviceName: {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
    serviceStatus: {none, REGISTERED, SUSPENDED, UNDISCOVERABLE};
    sNssais: array 1..2 of {none, 1, 2, 3};
    allowedsNssais: array 1..2 of {none, 1, 2, 3};
    operation1: Operation;
    operation2: Operation;

DEFINE
    --all mandatory params should be valid
    isServiceInstanceValid := 
        serviceInstanceId != none
        & serviceName != none
        & serviceStatus = REGISTERED;

MODULE Operation

VAR
    allowedNFInstances: array 1..2 of {none, 1, 2, 3, 4, 5};
    allowedNFTypes: array 1..2 of {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    opName: {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
    opScope: array 1..2 of {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
    param1: Param;
    param2: Param;

DEFINE
    --all mandatory params should be valid
    isOperationValid := 
        opName != none;
    
    isParamVerified :=
        isOperationValid 
        & param1.isParamVerified 
        & param2.isParamVerified;

MODULE Param

VAR
    isSensitive: boolean;
    name: {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
    value: 0..100;
    isVerified : boolean;

DEFINE
    isParamVerificationReq := !(name in {none, UNSPECIFIED}) & isSensitive;
    isParamVerified := 
    case
        !isParamVerificationReq : TRUE;
        isParamVerificationReq & isVerified: TRUE;
        isParamVerificationReq & !isVerified: FALSE;
        TRUE: FALSE;
    esac;

---------- begin NFDiscoveryRequest declaration ----------
MODULE NFDiscoveryRequest
VAR
    requesterID : {none, 1, 2, 3, 4, 5};
    targetNFType : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    requesterNFType : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    sNssais : {none, 1, 2, 3};
    serviceName : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
    targetNfInstanceId : {none, 1, 2, 3, 4, 5};
    requesterSNssais : {none, 1, 2, 3};


DEFINE
    --all mandatory params should be valid
    isNFDiscReqValid :=
        requesterID != none
        & targetNFType != none
        & requesterNFType != none;
---------- begin AccessTokenRequest declaration ----------
MODULE AccessTokenRequest(reqForSpecificProducer)
VAR
    grantType : {none, client_credentials};
    nfInstanceId : {none, 1, 2, 3, 4, 5};
    scopeService : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
    scopeOperation : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
    targetNFType : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    targetNfInstanceId : {none, 1, 2, 3, 4, 5};
    targetSnssaiList : {none, 1, 2, 3};



DEFINE
    --all mandatory params should be valid
    isATReqValid := 
        grantType != none
        & nfInstanceId != none
        & scopeService != none
        & (targetNfInstanceId = none xor targetNFType = none)
        & ((reqForSpecificProducer) -> (targetNfInstanceId != none))
        & ((!reqForSpecificProducer) -> (targetNFType != none));
    
    -- -- is token for specific producer? 
    -- specificProducer := 
    --     targetNfInstanceId != none;

    -- -- is token for specific nfType? 
    -- specificNFType := 
    --     targetNFType != none;


---------- begin AccessToken declaration ----------
MODULE AccessToken(reqForSpecificProducer)
VAR
    sub : {none, 1, 2, 3, 4, 5};
    aud_NFInstanceId : {none, 1, 2, 3, 4, 5};
    aud_NFType : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
    scopeService : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
    scopeOperation : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
    exp_ : boolean;
    producerSnssaiList : array 1..2 of  {none, 1, 2, 3};



DEFINE
    isTokenValid := 
        sub != none
        & (aud_NFInstanceId = none xor aud_NFType = none)
        & ((reqForSpecificProducer) -> (aud_NFInstanceId != none))
        & ((!reqForSpecificProducer) -> (aud_NFType != none))
        & scopeService != none
        -- & scopeOpName != none
        & exp_ = FALSE;

---------- begin ServiceRequest declaration ----------
MODULE ServiceRequest
VAR
    subjectID : {none, 1, 2, 3, 4, 5};
    audienceID : {none, 1, 2, 3, 4, 5};
    service : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
    operation : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
    sNssais : {none, 1, 2, 3};


DEFINE 
    isServiceRequestValid := 
        subjectID != none 
        & audienceID != none
        & service != none
        & operation != none;

MODULE main

CONSTANTS --not used anywhere
    CONSUMER_1, CONSUMER_2;
VAR
    --------- NF Configuration variable ----------------
    consumer1: NF;
    consumer2: NF;
    producer1: NF;
    producer2: NF;
    producer3: NF;

    reqForSpecificProducer: boolean;
    ------------------- OAM
    OAMConsumerPresent: boolean;
    OAMProducerPresent: boolean;

    OAMConsumer1Approve: boolean;
    OAMConsumer2Approve: boolean;
    OAMProducer1Approve: boolean;
    OAMProducer2Approve: boolean;
    OAMProducer3Approve: boolean;
    updateConsumer1: boolean;
    adversaryUpdateConsumer1: boolean;
    updateConsumer2: boolean;
    adversaryUpdateConsumer2: boolean;
    updateProducer1: boolean;
    adversaryUpdateProducer1: boolean;
    updateProducer2: boolean;
    adversaryUpdateProducer2: boolean;
    updateProducer3: boolean;
    adversaryUpdateProducer3: boolean;

    -------------------- Update------------------------
    -- 0: no update; 1: everything; 2: most things 3: only some
    updateLevelConsumer1: 0..3; -- update consumer1 non deterministically
    updateLevelConsumer2: 0..3; -- update consumer2 non deterministically
    updateLevelProducer1: 0..3; -- update producer1 non deterministically
    updateLevelProducer2: 0..3; -- update producer2 non deterministically
    updateLevelProducer3: 0..3; -- update producer3 non deterministically

    updateDiscoveryRequest: boolean;
    updateATRequest: boolean;
    updateServiceRequest: boolean;

    --------- Adversary Control variable ----------------
    adversaryPresent : boolean;
    adversaryDiscoveryRequest: boolean;
    adversaryATRequest: boolean;
    adversaryServiceRequest: boolean;
    
    ------------------------ other params-----------
    disableOptionalParams_AT: boolean;

    s1: protocol(consumer1,consumer2,producer1,producer2,producer3,reqForSpecificProducer,OAMConsumerPresent,OAMProducerPresent,OAMConsumer1Approve,OAMConsumer2Approve,OAMProducer1Approve,OAMProducer2Approve,OAMProducer3Approve,updateConsumer1,updateConsumer2,benignUpdateConsumer,updateProducer1,updateProducer2,updateProducer3,benignUpdateProducer,adversaryPresent,adversaryUpdateConsumer1,adversaryUpdateConsumer2,adversaryUpdateProducer1,adversaryUpdateProducer2,adversaryUpdateProducer3,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,updateDiscoveryRequest,updateATRequest,updateServiceRequest,disableOptionalParams_AT);

/-- Property P1: 
    Query: Can the consumer bypass access token checks?
    Implementation idea: to get a service, consumer's slice info must match the producer's.
    Result: Confused Producer Attack for ATReq of specific NF Type (access services of a producer using an access token of another.)
    --/
    LTLSPEC
    (   
        ------------OAM control-----------
        G(OAMConsumerPresent)
        & G(!OAMConsumer1Approve)
        & G(!OAMConsumer2Approve)
        & G(OAMProducerPresent)
        & G(!OAMProducer1Approve)
        & G(!OAMProducer2Approve)
        ------------adversary control---------
        & G(adversaryPresent)
        & G(!adversaryDiscoveryRequest)
        & G(!adversaryATRequest)
        & G(!adversaryServiceRequest)
        ------------update control---------
        & G(updateLevelConsumer1=0)
        & G(updateLevelConsumer2=0)
        & G(updateLevelProducer1=0)
        & G(updateLevelProducer2=0)
        & G(updateLevelProducer3=0)

        & G(!updateDiscoveryRequest)
        & G(!updateServiceRequest)
        & G(!updateATRequest)
        ------------others-----------------
    )->
    G(
        ((s1.serviceRequest.service = s1.producer.nfService1.serviceName & s1.isServiceReqGranted) ->(
            (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
                (
                    (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( -- TRUE
                        (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                        |
                        (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                    ))
                    & -- TRUE
                    (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
                            (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                    ))
                    & -- TRUE
                    ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
                        (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                    ))
                    -- trivially return true when both s1.consumer.sNssais[1] & s1.consumer.sNssais[2] are none
                )
            ))
        ))
    );


ASSIGN

    --------- environment variables ----------------
    init(reqForSpecificProducer) := {TRUE, FALSE};
    next(reqForSpecificProducer) := reqForSpecificProducer;
    
    -- consumer1
    init(consumer1.model_id) := 1;
    init(consumer1.CCA_subject) := 1;
    init(consumer1.nfInstanceId) := 1;
    init(consumer1.nfType) := AMF;
    init(consumer1.nfStatus) := REGISTERED;
    init(consumer1.sNssais[1]) := 1;
    init(consumer1.sNssais[2]) := none;
    init(consumer1.allowedNFTypes[1]) := AMF;
    init(consumer1.allowedNFTypes[2]) := UDM;
    init(consumer1.allowedsNssais[1]) := 1;
    init(consumer1.allowedsNssais[2]) := none;
    init(consumer1.load) := 0;
    init(consumer1.capacity) := 10;
    init(consumer1.priority) := 0;
    -- consumer1.nfService1
    init(consumer1.nfService1.allowedNFTypes[1]) := AMF;
    init(consumer1.nfService1.allowedNFTypes[2]) := none;
    init(consumer1.nfService1.load) := 0;
    init(consumer1.nfService1.capacity) := 10;
    init(consumer1.nfService1.oauth2Required) := TRUE;
    init(consumer1.nfService1.priority) := 0;
    init(consumer1.nfService1.serviceInstanceId) := 11;
    init(consumer1.nfService1.serviceName) := namf_comm;
    init(consumer1.nfService1.serviceStatus) := REGISTERED;
    init(consumer1.nfService1.sNssais[1]) := 1;
    init(consumer1.nfService1.sNssais[2]) := none;
    init(consumer1.nfService1.allowedsNssais[1]) := 1;
    init(consumer1.nfService1.allowedsNssais[2]) := none;
    -- consumer1.nfService1.operation1
    init(consumer1.nfService1.operation1.allowedNFInstances[1]) := none;
    init(consumer1.nfService1.operation1.allowedNFInstances[2]) := none;
    init(consumer1.nfService1.operation1.allowedNFTypes[1]) := AMF;
    init(consumer1.nfService1.operation1.allowedNFTypes[2]) := none;
    init(consumer1.nfService1.operation1.opName) := CreateUEContext;
    init(consumer1.nfService1.operation1.opScope[1]) := namf_comm;
    init(consumer1.nfService1.operation1.opScope[2]) := none;
    -- consumer1.nfService1.operation1.param1
    init(consumer1.nfService1.operation1.param1.isSensitive) := TRUE;
    init(consumer1.nfService1.operation1.param1.name) := ueContextId;
    init(consumer1.nfService1.operation1.param1.value) := 1;

    -- consumer1.nfService1.operation1.param2
    init(consumer1.nfService1.operation1.param2.isSensitive) := FALSE;
    init(consumer1.nfService1.operation1.param2.name) := none;
    init(consumer1.nfService1.operation1.param2.value) := 0;


    -- consumer1.nfService1.operation2
    init(consumer1.nfService1.operation2.allowedNFInstances[1]) := none;
    init(consumer1.nfService1.operation2.allowedNFInstances[2]) := none;
    init(consumer1.nfService1.operation2.allowedNFTypes[1]) := AMF;
    init(consumer1.nfService1.operation2.allowedNFTypes[2]) := none;
    init(consumer1.nfService1.operation2.opName) := ReleaseUEContext;
    init(consumer1.nfService1.operation2.opScope[1]) := namf_comm;
    init(consumer1.nfService1.operation2.opScope[2]) := none;
    -- consumer1.nfService1.operation2.param1
    init(consumer1.nfService1.operation2.param1.isSensitive) := TRUE;
    init(consumer1.nfService1.operation2.param1.name) := ueContextId;
    init(consumer1.nfService1.operation2.param1.value) := 1;

    -- consumer1.nfService1.operation2.param2
    init(consumer1.nfService1.operation2.param2.isSensitive) := FALSE;
    init(consumer1.nfService1.operation2.param2.name) := none;
    init(consumer1.nfService1.operation2.param2.value) := 0;



    -- consumer1.nfService2
    init(consumer1.nfService2.allowedNFTypes[1]) := UDM;
    init(consumer1.nfService2.allowedNFTypes[2]) := none;
    init(consumer1.nfService2.load) := 0;
    init(consumer1.nfService2.capacity) := 10;
    init(consumer1.nfService2.oauth2Required) := TRUE;
    init(consumer1.nfService2.priority) := 0;
    init(consumer1.nfService2.serviceInstanceId) := 12;
    init(consumer1.nfService2.serviceName) := namf_loc;
    init(consumer1.nfService2.serviceStatus) := REGISTERED;
    init(consumer1.nfService2.sNssais[1]) := 1;
    init(consumer1.nfService2.sNssais[2]) := none;
    init(consumer1.nfService2.allowedsNssais[1]) := 1;
    init(consumer1.nfService2.allowedsNssais[2]) := none;
    -- consumer1.nfService2.operation1
    init(consumer1.nfService2.operation1.allowedNFInstances[1]) := none;
    init(consumer1.nfService2.operation1.allowedNFInstances[2]) := none;
    init(consumer1.nfService2.operation1.allowedNFTypes[1]) := none;
    init(consumer1.nfService2.operation1.allowedNFTypes[2]) := none;
    init(consumer1.nfService2.operation1.opName) := ProvideLocationInfo;
    init(consumer1.nfService2.operation1.opScope[1]) := namf_loc;
    init(consumer1.nfService2.operation1.opScope[2]) := none;
    -- consumer1.nfService2.operation1.param1
    init(consumer1.nfService2.operation1.param1.isSensitive) := TRUE;
    init(consumer1.nfService2.operation1.param1.name) := ueContextId;
    init(consumer1.nfService2.operation1.param1.value) := 1;

    -- consumer1.nfService2.operation1.param2
    init(consumer1.nfService2.operation1.param2.isSensitive) := FALSE;
    init(consumer1.nfService2.operation1.param2.name) := none;
    init(consumer1.nfService2.operation1.param2.value) := 0;


    -- consumer1.nfService2.operation2
    init(consumer1.nfService2.operation2.allowedNFInstances[1]) := none;
    init(consumer1.nfService2.operation2.allowedNFInstances[2]) := none;
    init(consumer1.nfService2.operation2.allowedNFTypes[1]) := none;
    init(consumer1.nfService2.operation2.allowedNFTypes[2]) := none;
    init(consumer1.nfService2.operation2.opName) := none;
    init(consumer1.nfService2.operation2.opScope[1]) := none;
    init(consumer1.nfService2.operation2.opScope[2]) := none;
    -- consumer1.nfService2.operation2.param1
    init(consumer1.nfService2.operation2.param1.isSensitive) := TRUE;
    init(consumer1.nfService2.operation2.param1.name) := ueContextId;
    init(consumer1.nfService2.operation2.param1.value) := 1;

    -- consumer1.nfService2.operation2.param2
    init(consumer1.nfService2.operation2.param2.isSensitive) := FALSE;
    init(consumer1.nfService2.operation2.param2.name) := none;
    init(consumer1.nfService2.operation2.param2.value) := 0;




    -- consumer2
    init(consumer2.model_id) := 2;
    init(consumer2.CCA_subject) := 2;
    init(consumer2.nfInstanceId) := 2;
    init(consumer2.nfType) := SMF;
    init(consumer2.nfStatus) := REGISTERED;
    init(consumer2.sNssais[1]) := 1;
    init(consumer2.sNssais[2]) := 3;
    init(consumer2.allowedNFTypes[1]) := AMF;
    init(consumer2.allowedNFTypes[2]) := SMF;
    init(consumer2.allowedsNssais[1]) := 1;
    init(consumer2.allowedsNssais[2]) := 3;
    init(consumer2.load) := 0;
    init(consumer2.capacity) := 10;
    init(consumer2.priority) := 0;
    -- consumer2.nfService1
    init(consumer2.nfService1.allowedNFTypes[1]) := AMF;
    init(consumer2.nfService1.allowedNFTypes[2]) := none;
    init(consumer2.nfService1.load) := 0;
    init(consumer2.nfService1.capacity) := 10;
    init(consumer2.nfService1.oauth2Required) := TRUE;
    init(consumer2.nfService1.priority) := 0;
    init(consumer2.nfService1.serviceInstanceId) := 21;
    init(consumer2.nfService1.serviceName) := nsmf-event-exposure;
    init(consumer2.nfService1.serviceStatus) := REGISTERED;
    init(consumer2.nfService1.sNssais[1]) := 1;
    init(consumer2.nfService1.sNssais[2]) := 3;
    init(consumer2.nfService1.allowedsNssais[1]) := 1;
    init(consumer2.nfService1.allowedsNssais[2]) := 3;
    -- consumer2.nfService1.operation1
    init(consumer2.nfService1.operation1.allowedNFInstances[1]) := none;
    init(consumer2.nfService1.operation1.allowedNFInstances[2]) := none;
    init(consumer2.nfService1.operation1.allowedNFTypes[1]) := none;
    init(consumer2.nfService1.operation1.allowedNFTypes[2]) := none;
    init(consumer2.nfService1.operation1.opName) := CreateIndividualSubcription;
    init(consumer2.nfService1.operation1.opScope[1]) := nsmf-event-exposure;
    init(consumer2.nfService1.operation1.opScope[2]) := none;
    -- consumer2.nfService1.operation1.param1
    init(consumer2.nfService1.operation1.param1.isSensitive) := FALSE;
    init(consumer2.nfService1.operation1.param1.name) := UNSPECIFIED;
    init(consumer2.nfService1.operation1.param1.value) := 0;

    -- consumer2.nfService1.operation1.param2
    init(consumer2.nfService1.operation1.param2.isSensitive) := FALSE;
    init(consumer2.nfService1.operation1.param2.name) := UNSPECIFIED;
    init(consumer2.nfService1.operation1.param2.value) := 0;


    -- consumer2.nfService1.operation2
    init(consumer2.nfService1.operation2.allowedNFInstances[1]) := none;
    init(consumer2.nfService1.operation2.allowedNFInstances[2]) := none;
    init(consumer2.nfService1.operation2.allowedNFTypes[1]) := none;
    init(consumer2.nfService1.operation2.allowedNFTypes[2]) := none;
    init(consumer2.nfService1.operation2.opName) := GetIndividualSubcription;
    init(consumer2.nfService1.operation2.opScope[1]) := nsmf-event-exposure;
    init(consumer2.nfService1.operation2.opScope[2]) := none;
    -- consumer2.nfService1.operation2.param1
    init(consumer2.nfService1.operation2.param1.isSensitive) := TRUE;
    init(consumer2.nfService1.operation2.param1.name) := subId;
    init(consumer2.nfService1.operation2.param1.value) := 11;

    -- consumer2.nfService1.operation2.param2
    init(consumer2.nfService1.operation2.param2.isSensitive) := FALSE;
    init(consumer2.nfService1.operation2.param2.name) := none;
    init(consumer2.nfService1.operation2.param2.value) := 0;



    -- consumer2.nfService2
    init(consumer2.nfService2.allowedNFTypes[1]) := AMF;
    init(consumer2.nfService2.allowedNFTypes[2]) := SMF;
    init(consumer2.nfService2.load) := 0;
    init(consumer2.nfService2.capacity) := 10;
    init(consumer2.nfService2.oauth2Required) := TRUE;
    init(consumer2.nfService2.priority) := 0;
    init(consumer2.nfService2.serviceInstanceId) := 22;
    init(consumer2.nfService2.serviceName) := Nsmf_PDUSession;
    init(consumer2.nfService2.serviceStatus) := REGISTERED;
    init(consumer2.nfService2.sNssais[1]) := 1;
    init(consumer2.nfService2.sNssais[2]) := 3;
    init(consumer2.nfService2.allowedsNssais[1]) := 1;
    init(consumer2.nfService2.allowedsNssais[2]) := 3;
    -- consumer2.nfService2.operation1
    init(consumer2.nfService2.operation1.allowedNFInstances[1]) := none;
    init(consumer2.nfService2.operation1.allowedNFInstances[2]) := none;
    init(consumer2.nfService2.operation1.allowedNFTypes[1]) := AMF;
    init(consumer2.nfService2.operation1.allowedNFTypes[2]) := none;
    init(consumer2.nfService2.operation1.opName) := PostSmContexts;
    init(consumer2.nfService2.operation1.opScope[1]) := Nsmf_PDUSession;
    init(consumer2.nfService2.operation1.opScope[2]) := none;
    -- consumer2.nfService2.operation1.param1
    init(consumer2.nfService2.operation1.param1.isSensitive) := FALSE;
    init(consumer2.nfService2.operation1.param1.name) := UNSPECIFIED;
    init(consumer2.nfService2.operation1.param1.value) := 0;

    -- consumer2.nfService2.operation1.param2
    init(consumer2.nfService2.operation1.param2.isSensitive) := FALSE;
    init(consumer2.nfService2.operation1.param2.name) := UNSPECIFIED;
    init(consumer2.nfService2.operation1.param2.value) := 0;


    -- consumer2.nfService2.operation2
    init(consumer2.nfService2.operation2.allowedNFInstances[1]) := none;
    init(consumer2.nfService2.operation2.allowedNFInstances[2]) := none;
    init(consumer2.nfService2.operation2.allowedNFTypes[1]) := AMF;
    init(consumer2.nfService2.operation2.allowedNFTypes[2]) := SMF;
    init(consumer2.nfService2.operation2.opName) := RetrieveSmContext;
    init(consumer2.nfService2.operation2.opScope[1]) := Nsmf_PDUSession;
    init(consumer2.nfService2.operation2.opScope[2]) := none;
    -- consumer2.nfService2.operation2.param1
    init(consumer2.nfService2.operation2.param1.isSensitive) := TRUE;
    init(consumer2.nfService2.operation2.param1.name) := smContextRef;
    init(consumer2.nfService2.operation2.param1.value) := 1;

    -- consumer2.nfService2.operation2.param2
    init(consumer2.nfService2.operation2.param2.isSensitive) := FALSE;
    init(consumer2.nfService2.operation2.param2.name) := UNSPECIFIED;
    init(consumer2.nfService2.operation2.param2.value) := 1;




    -- producer1
    init(producer1.model_id) := 3;
    init(producer1.CCA_subject) := 3;
    init(producer1.nfInstanceId) := 3;
    init(producer1.nfType) := AMF;
    init(producer1.nfStatus) := REGISTERED;
    init(producer1.sNssais[1]) := 2;
    init(producer1.sNssais[2]) := 3;
    init(producer1.allowedNFTypes[1]) := AMF;
    init(producer1.allowedNFTypes[2]) := UDM;
    init(producer1.allowedsNssais[1]) := 2;
    init(producer1.allowedsNssais[2]) := 3;
    init(producer1.load) := 0;
    init(producer1.capacity) := 10;
    init(producer1.priority) := 0;
    -- producer1.nfService1
    init(producer1.nfService1.allowedNFTypes[1]) := AMF;
    init(producer1.nfService1.allowedNFTypes[2]) := none;
    init(producer1.nfService1.load) := 0;
    init(producer1.nfService1.capacity) := 10;
    init(producer1.nfService1.oauth2Required) := TRUE;
    init(producer1.nfService1.priority) := 0;
    init(producer1.nfService1.serviceInstanceId) := 31;
    init(producer1.nfService1.serviceName) := namf_comm;
    init(producer1.nfService1.serviceStatus) := REGISTERED;
    init(producer1.nfService1.sNssais[1]) := 2;
    init(producer1.nfService1.sNssais[2]) := 3;
    init(producer1.nfService1.allowedsNssais[1]) := 2;
    init(producer1.nfService1.allowedsNssais[2]) := 3;
    -- producer1.nfService1.operation1
    init(producer1.nfService1.operation1.allowedNFInstances[1]) := none;
    init(producer1.nfService1.operation1.allowedNFInstances[2]) := none;
    init(producer1.nfService1.operation1.allowedNFTypes[1]) := AMF;
    init(producer1.nfService1.operation1.allowedNFTypes[2]) := none;
    init(producer1.nfService1.operation1.opName) := CreateUEContext;
    init(producer1.nfService1.operation1.opScope[1]) := namf_comm;
    init(producer1.nfService1.operation1.opScope[2]) := none;
    -- producer1.nfService1.operation1.param1
    init(producer1.nfService1.operation1.param1.isSensitive) := TRUE;
    init(producer1.nfService1.operation1.param1.name) := ueContextId;
    init(producer1.nfService1.operation1.param1.value) := 1;

    -- producer1.nfService1.operation1.param2
    init(producer1.nfService1.operation1.param2.isSensitive) := FALSE;
    init(producer1.nfService1.operation1.param2.name) := none;
    init(producer1.nfService1.operation1.param2.value) := 0;


    -- producer1.nfService1.operation2
    init(producer1.nfService1.operation2.allowedNFInstances[1]) := none;
    init(producer1.nfService1.operation2.allowedNFInstances[2]) := none;
    init(producer1.nfService1.operation2.allowedNFTypes[1]) := AMF;
    init(producer1.nfService1.operation2.allowedNFTypes[2]) := none;
    init(producer1.nfService1.operation2.opName) := ReleaseUEContext;
    init(producer1.nfService1.operation2.opScope[1]) := namf_comm;
    init(producer1.nfService1.operation2.opScope[2]) := none;
    -- producer1.nfService1.operation2.param1
    init(producer1.nfService1.operation2.param1.isSensitive) := TRUE;
    init(producer1.nfService1.operation2.param1.name) := ueContextId;
    init(producer1.nfService1.operation2.param1.value) := 1;

    -- producer1.nfService1.operation2.param2
    init(producer1.nfService1.operation2.param2.isSensitive) := FALSE;
    init(producer1.nfService1.operation2.param2.name) := none;
    init(producer1.nfService1.operation2.param2.value) := 0;



    -- producer1.nfService2
    init(producer1.nfService2.allowedNFTypes[1]) := UDM;
    init(producer1.nfService2.allowedNFTypes[2]) := none;
    init(producer1.nfService2.load) := 0;
    init(producer1.nfService2.capacity) := 10;
    init(producer1.nfService2.oauth2Required) := TRUE;
    init(producer1.nfService2.priority) := 0;
    init(producer1.nfService2.serviceInstanceId) := 32;
    init(producer1.nfService2.serviceName) := namf_loc;
    init(producer1.nfService2.serviceStatus) := REGISTERED;
    init(producer1.nfService2.sNssais[1]) := 2;
    init(producer1.nfService2.sNssais[2]) := 3;
    init(producer1.nfService2.allowedsNssais[1]) := 2;
    init(producer1.nfService2.allowedsNssais[2]) := 3;
    -- producer1.nfService2.operation1
    init(producer1.nfService2.operation1.allowedNFInstances[1]) := none;
    init(producer1.nfService2.operation1.allowedNFInstances[2]) := none;
    init(producer1.nfService2.operation1.allowedNFTypes[1]) := none;
    init(producer1.nfService2.operation1.allowedNFTypes[2]) := none;
    init(producer1.nfService2.operation1.opName) := ProvideLocationInfo;
    init(producer1.nfService2.operation1.opScope[1]) := namf_loc;
    init(producer1.nfService2.operation1.opScope[2]) := none;
    -- producer1.nfService2.operation1.param1
    init(producer1.nfService2.operation1.param1.isSensitive) := TRUE;
    init(producer1.nfService2.operation1.param1.name) := ueContextId;
    init(producer1.nfService2.operation1.param1.value) := 1;

    -- producer1.nfService2.operation1.param2
    init(producer1.nfService2.operation1.param2.isSensitive) := FALSE;
    init(producer1.nfService2.operation1.param2.name) := none;
    init(producer1.nfService2.operation1.param2.value) := 0;


    -- producer1.nfService2.operation2
    init(producer1.nfService2.operation2.allowedNFInstances[1]) := none;
    init(producer1.nfService2.operation2.allowedNFInstances[2]) := none;
    init(producer1.nfService2.operation2.allowedNFTypes[1]) := none;
    init(producer1.nfService2.operation2.allowedNFTypes[2]) := none;
    init(producer1.nfService2.operation2.opName) := none;
    init(producer1.nfService2.operation2.opScope[1]) := none;
    init(producer1.nfService2.operation2.opScope[2]) := none;
    -- producer1.nfService2.operation2.param1
    init(producer1.nfService2.operation2.param1.isSensitive) := TRUE;
    init(producer1.nfService2.operation2.param1.name) := ueContextId;
    init(producer1.nfService2.operation2.param1.value) := 1;

    -- producer1.nfService2.operation2.param2
    init(producer1.nfService2.operation2.param2.isSensitive) := FALSE;
    init(producer1.nfService2.operation2.param2.name) := none;
    init(producer1.nfService2.operation2.param2.value) := 0;




    -- producer2
    init(producer2.model_id) := 4;
    init(producer2.CCA_subject) := 4;
    init(producer2.nfInstanceId) := 4;
    init(producer2.nfType) := UDM;
    init(producer2.nfStatus) := REGISTERED;
    init(producer2.sNssais[1]) := 3;
    init(producer2.sNssais[2]) := none;
    init(producer2.allowedNFTypes[1]) := AMF;
    init(producer2.allowedNFTypes[2]) := SMF;
    init(producer2.allowedsNssais[1]) := 3;
    init(producer2.allowedsNssais[2]) := none;
    init(producer2.load) := 0;
    init(producer2.capacity) := 10;
    init(producer2.priority) := 0;
    -- producer2.nfService1
    init(producer2.nfService1.allowedNFTypes[1]) := AMF;
    init(producer2.nfService1.allowedNFTypes[2]) := SMF;
    init(producer2.nfService1.load) := 0;
    init(producer2.nfService1.capacity) := 10;
    init(producer2.nfService1.oauth2Required) := TRUE;
    init(producer2.nfService1.priority) := 0;
    init(producer2.nfService1.serviceInstanceId) := 41;
    init(producer2.nfService1.serviceName) := Nudm_UECM;
    init(producer2.nfService1.serviceStatus) := REGISTERED;
    init(producer2.nfService1.sNssais[1]) := 3;
    init(producer2.nfService1.sNssais[2]) := none;
    init(producer2.nfService1.allowedsNssais[1]) := 3;
    init(producer2.nfService1.allowedsNssais[2]) := none;
    -- producer2.nfService1.operation1
    init(producer2.nfService1.operation1.allowedNFInstances[1]) := none;
    init(producer2.nfService1.operation1.allowedNFInstances[2]) := none;
    init(producer2.nfService1.operation1.allowedNFTypes[1]) := AMF;
    init(producer2.nfService1.operation1.allowedNFTypes[2]) := SMF;
    init(producer2.nfService1.operation1.opName) := GetLocationInfo;
    init(producer2.nfService1.operation1.opScope[1]) := Nudm_UECM;
    init(producer2.nfService1.operation1.opScope[2]) := none;
    -- producer2.nfService1.operation1.param1
    init(producer2.nfService1.operation1.param1.isSensitive) := TRUE;
    init(producer2.nfService1.operation1.param1.name) := ueId;
    init(producer2.nfService1.operation1.param1.value) := 1;

    -- producer2.nfService1.operation1.param2
    init(producer2.nfService1.operation1.param2.isSensitive) := FALSE;
    init(producer2.nfService1.operation1.param2.name) := UNSPECIFIED;
    init(producer2.nfService1.operation1.param2.value) := 1;


    -- producer2.nfService1.operation2
    init(producer2.nfService1.operation2.allowedNFInstances[1]) := none;
    init(producer2.nfService1.operation2.allowedNFInstances[2]) := none;
    init(producer2.nfService1.operation2.allowedNFTypes[1]) := AMF;
    init(producer2.nfService1.operation2.allowedNFTypes[2]) := none;
    init(producer2.nfService1.operation2.opName) := _3GppRegistration;
    init(producer2.nfService1.operation2.opScope[1]) := nudm-sdm;
    init(producer2.nfService1.operation2.opScope[2]) := none;
    -- producer2.nfService1.operation2.param1
    init(producer2.nfService1.operation2.param1.isSensitive) := TRUE;
    init(producer2.nfService1.operation2.param1.name) := ueId;
    init(producer2.nfService1.operation2.param1.value) := 1;

    -- producer2.nfService1.operation2.param2
    init(producer2.nfService1.operation2.param2.isSensitive) := FALSE;
    init(producer2.nfService1.operation2.param2.name) := UNSPECIFIED;
    init(producer2.nfService1.operation2.param2.value) := 0;



    -- producer2.nfService2
    init(producer2.nfService2.allowedNFTypes[1]) := AMF;
    init(producer2.nfService2.allowedNFTypes[2]) := SMF;
    init(producer2.nfService2.load) := 0;
    init(producer2.nfService2.capacity) := 10;
    init(producer2.nfService2.oauth2Required) := TRUE;
    init(producer2.nfService2.priority) := 0;
    init(producer2.nfService2.serviceInstanceId) := 42;
    init(producer2.nfService2.serviceName) := nudm_sdm;
    init(producer2.nfService2.serviceStatus) := REGISTERED;
    init(producer2.nfService2.sNssais[1]) := 3;
    init(producer2.nfService2.sNssais[2]) := none;
    init(producer2.nfService2.allowedsNssais[1]) := 3;
    init(producer2.nfService2.allowedsNssais[2]) := none;
    -- producer2.nfService2.operation1
    init(producer2.nfService2.operation1.allowedNFInstances[1]) := none;
    init(producer2.nfService2.operation1.allowedNFInstances[2]) := none;
    init(producer2.nfService2.operation1.allowedNFTypes[1]) := AMF;
    init(producer2.nfService2.operation1.allowedNFTypes[2]) := SMF;
    init(producer2.nfService2.operation1.opName) := GetDataSets;
    init(producer2.nfService2.operation1.opScope[1]) := nudm_sdm;
    init(producer2.nfService2.operation1.opScope[2]) := none;
    -- producer2.nfService2.operation1.param1
    init(producer2.nfService2.operation1.param1.isSensitive) := TRUE;
    init(producer2.nfService2.operation1.param1.name) := supi;
    init(producer2.nfService2.operation1.param1.value) := 1;

    -- producer2.nfService2.operation1.param2
    init(producer2.nfService2.operation1.param2.isSensitive) := FALSE;
    init(producer2.nfService2.operation1.param2.name) := UNSPECIFIED;
    init(producer2.nfService2.operation1.param2.value) := 0;


    -- producer2.nfService2.operation2
    init(producer2.nfService2.operation2.allowedNFInstances[1]) := none;
    init(producer2.nfService2.operation2.allowedNFInstances[2]) := none;
    init(producer2.nfService2.operation2.allowedNFTypes[1]) := AMF;
    init(producer2.nfService2.operation2.allowedNFTypes[2]) := SMF;
    init(producer2.nfService2.operation2.opName) := GetSharedData;
    init(producer2.nfService2.operation2.opScope[1]) := nudm_sdm;
    init(producer2.nfService2.operation2.opScope[2]) := none;
    -- producer2.nfService2.operation2.param1
    init(producer2.nfService2.operation2.param1.isSensitive) := TRUE;
    init(producer2.nfService2.operation2.param1.name) := shared-data-ids;
    init(producer2.nfService2.operation2.param1.value) := 1;

    -- producer2.nfService2.operation2.param2
    init(producer2.nfService2.operation2.param2.isSensitive) := FALSE;
    init(producer2.nfService2.operation2.param2.name) := UNSPECIFIED;
    init(producer2.nfService2.operation2.param2.value) := 0;




    -- producer3
    init(producer3.model_id) := 5;
    init(producer3.CCA_subject) := 5;
    init(producer3.nfInstanceId) := 5;
    init(producer3.nfType) := UDM;
    init(producer3.nfStatus) := REGISTERED;
    init(producer3.sNssais[1]) := 1;
    init(producer3.sNssais[2]) := 2;
    init(producer3.allowedNFTypes[1]) := AMF;
    init(producer3.allowedNFTypes[2]) := SMF;
    init(producer3.allowedsNssais[1]) := 1;
    init(producer3.allowedsNssais[2]) := 2;
    init(producer3.load) := 0;
    init(producer3.capacity) := 10;
    init(producer3.priority) := 0;
    -- producer3.nfService1
    init(producer3.nfService1.allowedNFTypes[1]) := AMF;
    init(producer3.nfService1.allowedNFTypes[2]) := SMF;
    init(producer3.nfService1.load) := 0;
    init(producer3.nfService1.capacity) := 10;
    init(producer3.nfService1.oauth2Required) := TRUE;
    init(producer3.nfService1.priority) := 0;
    init(producer3.nfService1.serviceInstanceId) := 51;
    init(producer3.nfService1.serviceName) := Nudm_UECM;
    init(producer3.nfService1.serviceStatus) := REGISTERED;
    init(producer3.nfService1.sNssais[1]) := 1;
    init(producer3.nfService1.sNssais[2]) := 2;
    init(producer3.nfService1.allowedsNssais[1]) := 1;
    init(producer3.nfService1.allowedsNssais[2]) := 2;
    -- producer3.nfService1.operation1
    init(producer3.nfService1.operation1.allowedNFInstances[1]) := none;
    init(producer3.nfService1.operation1.allowedNFInstances[2]) := none;
    init(producer3.nfService1.operation1.allowedNFTypes[1]) := AMF;
    init(producer3.nfService1.operation1.allowedNFTypes[2]) := SMF;
    init(producer3.nfService1.operation1.opName) := GetLocationInfo;
    init(producer3.nfService1.operation1.opScope[1]) := Nudm_UECM;
    init(producer3.nfService1.operation1.opScope[2]) := none;
    -- producer3.nfService1.operation1.param1
    init(producer3.nfService1.operation1.param1.isSensitive) := TRUE;
    init(producer3.nfService1.operation1.param1.name) := ueId;
    init(producer3.nfService1.operation1.param1.value) := 1;

    -- producer3.nfService1.operation1.param2
    init(producer3.nfService1.operation1.param2.isSensitive) := FALSE;
    init(producer3.nfService1.operation1.param2.name) := UNSPECIFIED;
    init(producer3.nfService1.operation1.param2.value) := 1;


    -- producer3.nfService1.operation2
    init(producer3.nfService1.operation2.allowedNFInstances[1]) := none;
    init(producer3.nfService1.operation2.allowedNFInstances[2]) := none;
    init(producer3.nfService1.operation2.allowedNFTypes[1]) := AMF;
    init(producer3.nfService1.operation2.allowedNFTypes[2]) := none;
    init(producer3.nfService1.operation2.opName) := _3GppRegistration;
    init(producer3.nfService1.operation2.opScope[1]) := Nudm_UECM;
    init(producer3.nfService1.operation2.opScope[2]) := nudm-uecm_amf-registration_write;
    -- producer3.nfService1.operation2.param1
    init(producer3.nfService1.operation2.param1.isSensitive) := TRUE;
    init(producer3.nfService1.operation2.param1.name) := ueId;
    init(producer3.nfService1.operation2.param1.value) := 1;

    -- producer3.nfService1.operation2.param2
    init(producer3.nfService1.operation2.param2.isSensitive) := FALSE;
    init(producer3.nfService1.operation2.param2.name) := UNSPECIFIED;
    init(producer3.nfService1.operation2.param2.value) := 1;



    -- producer3.nfService2
    init(producer3.nfService2.allowedNFTypes[1]) := AMF;
    init(producer3.nfService2.allowedNFTypes[2]) := SMF;
    init(producer3.nfService2.load) := 0;
    init(producer3.nfService2.capacity) := 10;
    init(producer3.nfService2.oauth2Required) := TRUE;
    init(producer3.nfService2.priority) := 0;
    init(producer3.nfService2.serviceInstanceId) := 52;
    init(producer3.nfService2.serviceName) := nudm_sdm;
    init(producer3.nfService2.serviceStatus) := REGISTERED;
    init(producer3.nfService2.sNssais[1]) := 1;
    init(producer3.nfService2.sNssais[2]) := 2;
    init(producer3.nfService2.allowedsNssais[1]) := 1;
    init(producer3.nfService2.allowedsNssais[2]) := 2;
    -- producer3.nfService2.operation1
    init(producer3.nfService2.operation1.allowedNFInstances[1]) := none;
    init(producer3.nfService2.operation1.allowedNFInstances[2]) := none;
    init(producer3.nfService2.operation1.allowedNFTypes[1]) := AMF;
    init(producer3.nfService2.operation1.allowedNFTypes[2]) := SMF;
    init(producer3.nfService2.operation1.opName) := GetDataSets;
    init(producer3.nfService2.operation1.opScope[1]) := nudm_sdm;
    init(producer3.nfService2.operation1.opScope[2]) := none;
    -- producer3.nfService2.operation1.param1
    init(producer3.nfService2.operation1.param1.isSensitive) := TRUE;
    init(producer3.nfService2.operation1.param1.name) := supi;
    init(producer3.nfService2.operation1.param1.value) := 1;

    -- producer3.nfService2.operation1.param2
    init(producer3.nfService2.operation1.param2.isSensitive) := FALSE;
    init(producer3.nfService2.operation1.param2.name) := UNSPECIFIED;
    init(producer3.nfService2.operation1.param2.value) := 0;


    -- producer3.nfService2.operation2
    init(producer3.nfService2.operation2.allowedNFInstances[1]) := none;
    init(producer3.nfService2.operation2.allowedNFInstances[2]) := none;
    init(producer3.nfService2.operation2.allowedNFTypes[1]) := AMF;
    init(producer3.nfService2.operation2.allowedNFTypes[2]) := SMF;
    init(producer3.nfService2.operation2.opName) := GetSharedData;
    init(producer3.nfService2.operation2.opScope[1]) := nudm_sdm;
    init(producer3.nfService2.operation2.opScope[2]) := none;
    -- producer3.nfService2.operation2.param1
    init(producer3.nfService2.operation2.param1.isSensitive) := TRUE;
    init(producer3.nfService2.operation2.param1.name) := shared-data-ids;
    init(producer3.nfService2.operation2.param1.value) := 1;

    -- producer3.nfService2.operation2.param2
    init(producer3.nfService2.operation2.param2.isSensitive) := FALSE;
    init(producer3.nfService2.operation2.param2.name) := UNSPECIFIED;
    init(producer3.nfService2.operation2.param2.value) := 0;




    -- consumer1
    next(consumer1.model_id) := consumer1.model_id;
    next(consumer1.CCA_subject) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.CCA_subject;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.CCA_subject;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.CCA_subject;
        TRUE: consumer1.CCA_subject;
    esac;
    next(consumer1.nfInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfInstanceId;
        TRUE: consumer1.nfInstanceId;
    esac;
    next(consumer1.nfType) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfType;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfType;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfType;
        TRUE: consumer1.nfType;
    esac;
    next(consumer1.nfStatus) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfStatus;
        (adversaryPresent & updateLevelConsumer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer1.nfStatus;
    esac;
    next(consumer1.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.sNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.sNssais[1];
        TRUE: consumer1.sNssais[1];
    esac;
    next(consumer1.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.sNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.sNssais[2];
        TRUE: consumer1.sNssais[2];
    esac;
    next(consumer1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.allowedNFTypes[1];
    esac;
    next(consumer1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.allowedNFTypes[2];
    esac;
    next(consumer1.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.allowedsNssais[1];
    esac;
    next(consumer1.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.allowedsNssais[2];
    esac;
    next(consumer1.load) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.load;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.load;
    esac;
    next(consumer1.capacity) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.capacity;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.capacity;
    esac;
    next(consumer1.priority) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.priority;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.priority;
    esac;
    -- consumer1.nfService1
    next(consumer1.nfService1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService1.allowedNFTypes[1];
    esac;
    next(consumer1.nfService1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService1.allowedNFTypes[2];
    esac;
    next(consumer1.nfService1.load) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.load;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService1.load;
    esac;
    next(consumer1.nfService1.capacity) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.capacity;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService1.capacity;
    esac;
    next(consumer1.nfService1.oauth2Required) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.oauth2Required;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.oauth2Required;
        TRUE: consumer1.nfService1.oauth2Required;
    esac;
    next(consumer1.nfService1.priority) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.priority;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService1.priority;
    esac;
    next(consumer1.nfService1.serviceInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.serviceInstanceId;
        TRUE: consumer1.nfService1.serviceInstanceId;
    esac;
    next(consumer1.nfService1.serviceName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.serviceName;
        TRUE: consumer1.nfService1.serviceName;
    esac;
    next(consumer1.nfService1.serviceStatus) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.serviceStatus;
        (adversaryPresent & updateLevelConsumer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer1.nfService1.serviceStatus;
    esac;
    next(consumer1.nfService1.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.sNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.sNssais[1];
        TRUE: consumer1.nfService1.sNssais[1];
    esac;
    next(consumer1.nfService1.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.sNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.sNssais[2];
        TRUE: consumer1.nfService1.sNssais[2];
    esac;
    next(consumer1.nfService1.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.nfService1.allowedsNssais[1];
    esac;
    next(consumer1.nfService1.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.nfService1.allowedsNssais[2];
    esac;
    -- consumer1.nfService1.operation1
    next(consumer1.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(consumer1.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(consumer1.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(consumer1.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(consumer1.nfService1.operation1.opName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.opName;
        TRUE: consumer1.nfService1.operation1.opName;
    esac;
    next(consumer1.nfService1.operation1.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.opScope[1];
        TRUE: consumer1.nfService1.operation1.opScope[1];
    esac;
    next(consumer1.nfService1.operation1.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.opScope[2];
        TRUE: consumer1.nfService1.operation1.opScope[2];
    esac;
    -- consumer1.nfService1.operation1.param1
    next(consumer1.nfService1.operation1.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param1.isSensitive;
        TRUE: consumer1.nfService1.operation1.param1.isSensitive;
    esac;
    next(consumer1.nfService1.operation1.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param1.name;
        TRUE: consumer1.nfService1.operation1.param1.name;
    esac;
    next(consumer1.nfService1.operation1.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param1.value;
        TRUE: consumer1.nfService1.operation1.param1.value;
    esac;

    -- consumer1.nfService1.operation1.param2
    next(consumer1.nfService1.operation1.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param2.isSensitive;
        TRUE: consumer1.nfService1.operation1.param2.isSensitive;
    esac;
    next(consumer1.nfService1.operation1.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param2.name;
        TRUE: consumer1.nfService1.operation1.param2.name;
    esac;
    next(consumer1.nfService1.operation1.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param2.value;
        TRUE: consumer1.nfService1.operation1.param2.value;
    esac;


    -- consumer1.nfService1.operation2
    next(consumer1.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(consumer1.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(consumer1.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(consumer1.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(consumer1.nfService1.operation2.opName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.opName;
        TRUE: consumer1.nfService1.operation2.opName;
    esac;
    next(consumer1.nfService1.operation2.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.opScope[1];
        TRUE: consumer1.nfService1.operation2.opScope[1];
    esac;
    next(consumer1.nfService1.operation2.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.opScope[2];
        TRUE: consumer1.nfService1.operation2.opScope[2];
    esac;
    -- consumer1.nfService1.operation2.param1
    next(consumer1.nfService1.operation2.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param1.isSensitive;
        TRUE: consumer1.nfService1.operation2.param1.isSensitive;
    esac;
    next(consumer1.nfService1.operation2.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param1.name;
        TRUE: consumer1.nfService1.operation2.param1.name;
    esac;
    next(consumer1.nfService1.operation2.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param1.value;
        TRUE: consumer1.nfService1.operation2.param1.value;
    esac;

    -- consumer1.nfService1.operation2.param2
    next(consumer1.nfService1.operation2.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param2.isSensitive;
        TRUE: consumer1.nfService1.operation2.param2.isSensitive;
    esac;
    next(consumer1.nfService1.operation2.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param2.name;
        TRUE: consumer1.nfService1.operation2.param2.name;
    esac;
    next(consumer1.nfService1.operation2.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param2.value;
        TRUE: consumer1.nfService1.operation2.param2.value;
    esac;



    -- consumer1.nfService2
    next(consumer1.nfService2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService2.allowedNFTypes[1];
    esac;
    next(consumer1.nfService2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService2.allowedNFTypes[2];
    esac;
    next(consumer1.nfService2.load) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.load;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService2.load;
    esac;
    next(consumer1.nfService2.capacity) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.capacity;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService2.capacity;
    esac;
    next(consumer1.nfService2.oauth2Required) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.oauth2Required;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.oauth2Required;
        TRUE: consumer1.nfService2.oauth2Required;
    esac;
    next(consumer1.nfService2.priority) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.priority;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService2.priority;
    esac;
    next(consumer1.nfService2.serviceInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.serviceInstanceId;
        TRUE: consumer1.nfService2.serviceInstanceId;
    esac;
    next(consumer1.nfService2.serviceName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.serviceName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.serviceName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.serviceName;
        TRUE: consumer1.nfService2.serviceName;
    esac;
    next(consumer1.nfService2.serviceStatus) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.serviceStatus;
        (adversaryPresent & updateLevelConsumer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer1.nfService2.serviceStatus;
    esac;
    next(consumer1.nfService2.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.sNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.sNssais[1];
        TRUE: consumer1.nfService2.sNssais[1];
    esac;
    next(consumer1.nfService2.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.sNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.sNssais[2];
        TRUE: consumer1.nfService2.sNssais[2];
    esac;
    next(consumer1.nfService2.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.nfService2.allowedsNssais[1];
    esac;
    next(consumer1.nfService2.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.nfService2.allowedsNssais[2];
    esac;
    -- consumer1.nfService2.operation1
    next(consumer1.nfService2.operation1.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(consumer1.nfService2.operation1.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(consumer1.nfService2.operation1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(consumer1.nfService2.operation1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(consumer1.nfService2.operation1.opName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.opName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.opName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.opName;
        TRUE: consumer1.nfService2.operation1.opName;
    esac;
    next(consumer1.nfService2.operation1.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.opScope[1];
        TRUE: consumer1.nfService2.operation1.opScope[1];
    esac;
    next(consumer1.nfService2.operation1.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.opScope[2];
        TRUE: consumer1.nfService2.operation1.opScope[2];
    esac;
    -- consumer1.nfService2.operation1.param1
    next(consumer1.nfService2.operation1.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.param1.isSensitive;
        TRUE: consumer1.nfService2.operation1.param1.isSensitive;
    esac;
    next(consumer1.nfService2.operation1.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.param1.name;
        TRUE: consumer1.nfService2.operation1.param1.name;
    esac;
    next(consumer1.nfService2.operation1.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.param1.value;
        TRUE: consumer1.nfService2.operation1.param1.value;
    esac;

    -- consumer1.nfService2.operation1.param2
    next(consumer1.nfService2.operation1.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.param2.isSensitive;
        TRUE: consumer1.nfService2.operation1.param2.isSensitive;
    esac;
    next(consumer1.nfService2.operation1.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.param2.name;
        TRUE: consumer1.nfService2.operation1.param2.name;
    esac;
    next(consumer1.nfService2.operation1.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation1.param2.value;
        TRUE: consumer1.nfService2.operation1.param2.value;
    esac;


    -- consumer1.nfService2.operation2
    next(consumer1.nfService2.operation2.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(consumer1.nfService2.operation2.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer1.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(consumer1.nfService2.operation2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(consumer1.nfService2.operation2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer1.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(consumer1.nfService2.operation2.opName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.opName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.opName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.opName;
        TRUE: consumer1.nfService2.operation2.opName;
    esac;
    next(consumer1.nfService2.operation2.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.opScope[1];
        TRUE: consumer1.nfService2.operation2.opScope[1];
    esac;
    next(consumer1.nfService2.operation2.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.opScope[2];
        TRUE: consumer1.nfService2.operation2.opScope[2];
    esac;
    -- consumer1.nfService2.operation2.param1
    next(consumer1.nfService2.operation2.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.param1.isSensitive;
        TRUE: consumer1.nfService2.operation2.param1.isSensitive;
    esac;
    next(consumer1.nfService2.operation2.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.param1.name;
        TRUE: consumer1.nfService2.operation2.param1.name;
    esac;
    next(consumer1.nfService2.operation2.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.param1.value;
        TRUE: consumer1.nfService2.operation2.param1.value;
    esac;

    -- consumer1.nfService2.operation2.param2
    next(consumer1.nfService2.operation2.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.param2.isSensitive;
        TRUE: consumer1.nfService2.operation2.param2.isSensitive;
    esac;
    next(consumer1.nfService2.operation2.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.param2.name;
        TRUE: consumer1.nfService2.operation2.param2.name;
    esac;
    next(consumer1.nfService2.operation2.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService2.operation2.param2.value;
        TRUE: consumer1.nfService2.operation2.param2.value;
    esac;




    -- consumer2
    next(consumer2.model_id) := consumer2.model_id;
    next(consumer2.CCA_subject) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.CCA_subject;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.CCA_subject;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.CCA_subject;
        TRUE: consumer2.CCA_subject;
    esac;
    next(consumer2.nfInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfInstanceId;
        TRUE: consumer2.nfInstanceId;
    esac;
    next(consumer2.nfType) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfType;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfType;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfType;
        TRUE: consumer2.nfType;
    esac;
    next(consumer2.nfStatus) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfStatus;
        (adversaryPresent & updateLevelConsumer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer2.nfStatus;
    esac;
    next(consumer2.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.sNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.sNssais[1];
        TRUE: consumer2.sNssais[1];
    esac;
    next(consumer2.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.sNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.sNssais[2];
        TRUE: consumer2.sNssais[2];
    esac;
    next(consumer2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.allowedNFTypes[1];
    esac;
    next(consumer2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.allowedNFTypes[2];
    esac;
    next(consumer2.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.allowedsNssais[1];
    esac;
    next(consumer2.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.allowedsNssais[2];
    esac;
    next(consumer2.load) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.load;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.load;
    esac;
    next(consumer2.capacity) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.capacity;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.capacity;
    esac;
    next(consumer2.priority) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.priority;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.priority;
    esac;
    -- consumer2.nfService1
    next(consumer2.nfService1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService1.allowedNFTypes[1];
    esac;
    next(consumer2.nfService1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService1.allowedNFTypes[2];
    esac;
    next(consumer2.nfService1.load) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.load;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService1.load;
    esac;
    next(consumer2.nfService1.capacity) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.capacity;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService1.capacity;
    esac;
    next(consumer2.nfService1.oauth2Required) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.oauth2Required;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.oauth2Required;
        TRUE: consumer2.nfService1.oauth2Required;
    esac;
    next(consumer2.nfService1.priority) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.priority;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService1.priority;
    esac;
    next(consumer2.nfService1.serviceInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.serviceInstanceId;
        TRUE: consumer2.nfService1.serviceInstanceId;
    esac;
    next(consumer2.nfService1.serviceName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.serviceName;
        TRUE: consumer2.nfService1.serviceName;
    esac;
    next(consumer2.nfService1.serviceStatus) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.serviceStatus;
        (adversaryPresent & updateLevelConsumer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer2.nfService1.serviceStatus;
    esac;
    next(consumer2.nfService1.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.sNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.sNssais[1];
        TRUE: consumer2.nfService1.sNssais[1];
    esac;
    next(consumer2.nfService1.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.sNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.sNssais[2];
        TRUE: consumer2.nfService1.sNssais[2];
    esac;
    next(consumer2.nfService1.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.nfService1.allowedsNssais[1];
    esac;
    next(consumer2.nfService1.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.nfService1.allowedsNssais[2];
    esac;
    -- consumer2.nfService1.operation1
    next(consumer2.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(consumer2.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(consumer2.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(consumer2.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(consumer2.nfService1.operation1.opName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.opName;
        TRUE: consumer2.nfService1.operation1.opName;
    esac;
    next(consumer2.nfService1.operation1.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.opScope[1];
        TRUE: consumer2.nfService1.operation1.opScope[1];
    esac;
    next(consumer2.nfService1.operation1.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.opScope[2];
        TRUE: consumer2.nfService1.operation1.opScope[2];
    esac;
    -- consumer2.nfService1.operation1.param1
    next(consumer2.nfService1.operation1.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param1.isSensitive;
        TRUE: consumer2.nfService1.operation1.param1.isSensitive;
    esac;
    next(consumer2.nfService1.operation1.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param1.name;
        TRUE: consumer2.nfService1.operation1.param1.name;
    esac;
    next(consumer2.nfService1.operation1.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param1.value;
        TRUE: consumer2.nfService1.operation1.param1.value;
    esac;

    -- consumer2.nfService1.operation1.param2
    next(consumer2.nfService1.operation1.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param2.isSensitive;
        TRUE: consumer2.nfService1.operation1.param2.isSensitive;
    esac;
    next(consumer2.nfService1.operation1.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param2.name;
        TRUE: consumer2.nfService1.operation1.param2.name;
    esac;
    next(consumer2.nfService1.operation1.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param2.value;
        TRUE: consumer2.nfService1.operation1.param2.value;
    esac;


    -- consumer2.nfService1.operation2
    next(consumer2.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(consumer2.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(consumer2.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(consumer2.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(consumer2.nfService1.operation2.opName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.opName;
        TRUE: consumer2.nfService1.operation2.opName;
    esac;
    next(consumer2.nfService1.operation2.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.opScope[1];
        TRUE: consumer2.nfService1.operation2.opScope[1];
    esac;
    next(consumer2.nfService1.operation2.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.opScope[2];
        TRUE: consumer2.nfService1.operation2.opScope[2];
    esac;
    -- consumer2.nfService1.operation2.param1
    next(consumer2.nfService1.operation2.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param1.isSensitive;
        TRUE: consumer2.nfService1.operation2.param1.isSensitive;
    esac;
    next(consumer2.nfService1.operation2.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param1.name;
        TRUE: consumer2.nfService1.operation2.param1.name;
    esac;
    next(consumer2.nfService1.operation2.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param1.value;
        TRUE: consumer2.nfService1.operation2.param1.value;
    esac;

    -- consumer2.nfService1.operation2.param2
    next(consumer2.nfService1.operation2.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param2.isSensitive;
        TRUE: consumer2.nfService1.operation2.param2.isSensitive;
    esac;
    next(consumer2.nfService1.operation2.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param2.name;
        TRUE: consumer2.nfService1.operation2.param2.name;
    esac;
    next(consumer2.nfService1.operation2.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param2.value;
        TRUE: consumer2.nfService1.operation2.param2.value;
    esac;



    -- consumer2.nfService2
    next(consumer2.nfService2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService2.allowedNFTypes[1];
    esac;
    next(consumer2.nfService2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService2.allowedNFTypes[2];
    esac;
    next(consumer2.nfService2.load) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.load;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService2.load;
    esac;
    next(consumer2.nfService2.capacity) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.capacity;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService2.capacity;
    esac;
    next(consumer2.nfService2.oauth2Required) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.oauth2Required;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.oauth2Required;
        TRUE: consumer2.nfService2.oauth2Required;
    esac;
    next(consumer2.nfService2.priority) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.priority;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService2.priority;
    esac;
    next(consumer2.nfService2.serviceInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.serviceInstanceId;
        TRUE: consumer2.nfService2.serviceInstanceId;
    esac;
    next(consumer2.nfService2.serviceName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.serviceName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.serviceName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.serviceName;
        TRUE: consumer2.nfService2.serviceName;
    esac;
    next(consumer2.nfService2.serviceStatus) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.serviceStatus;
        (adversaryPresent & updateLevelConsumer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer2.nfService2.serviceStatus;
    esac;
    next(consumer2.nfService2.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.sNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.sNssais[1];
        TRUE: consumer2.nfService2.sNssais[1];
    esac;
    next(consumer2.nfService2.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.sNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.sNssais[2];
        TRUE: consumer2.nfService2.sNssais[2];
    esac;
    next(consumer2.nfService2.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.nfService2.allowedsNssais[1];
    esac;
    next(consumer2.nfService2.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.nfService2.allowedsNssais[2];
    esac;
    -- consumer2.nfService2.operation1
    next(consumer2.nfService2.operation1.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(consumer2.nfService2.operation1.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(consumer2.nfService2.operation1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(consumer2.nfService2.operation1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(consumer2.nfService2.operation1.opName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.opName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.opName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.opName;
        TRUE: consumer2.nfService2.operation1.opName;
    esac;
    next(consumer2.nfService2.operation1.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.opScope[1];
        TRUE: consumer2.nfService2.operation1.opScope[1];
    esac;
    next(consumer2.nfService2.operation1.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.opScope[2];
        TRUE: consumer2.nfService2.operation1.opScope[2];
    esac;
    -- consumer2.nfService2.operation1.param1
    next(consumer2.nfService2.operation1.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.param1.isSensitive;
        TRUE: consumer2.nfService2.operation1.param1.isSensitive;
    esac;
    next(consumer2.nfService2.operation1.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.param1.name;
        TRUE: consumer2.nfService2.operation1.param1.name;
    esac;
    next(consumer2.nfService2.operation1.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.param1.value;
        TRUE: consumer2.nfService2.operation1.param1.value;
    esac;

    -- consumer2.nfService2.operation1.param2
    next(consumer2.nfService2.operation1.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.param2.isSensitive;
        TRUE: consumer2.nfService2.operation1.param2.isSensitive;
    esac;
    next(consumer2.nfService2.operation1.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.param2.name;
        TRUE: consumer2.nfService2.operation1.param2.name;
    esac;
    next(consumer2.nfService2.operation1.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation1.param2.value;
        TRUE: consumer2.nfService2.operation1.param2.value;
    esac;


    -- consumer2.nfService2.operation2
    next(consumer2.nfService2.operation2.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(consumer2.nfService2.operation2.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: consumer2.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(consumer2.nfService2.operation2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(consumer2.nfService2.operation2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: consumer2.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(consumer2.nfService2.operation2.opName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.opName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.opName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.opName;
        TRUE: consumer2.nfService2.operation2.opName;
    esac;
    next(consumer2.nfService2.operation2.opScope[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.opScope[1];
        TRUE: consumer2.nfService2.operation2.opScope[1];
    esac;
    next(consumer2.nfService2.operation2.opScope[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.opScope[2];
        TRUE: consumer2.nfService2.operation2.opScope[2];
    esac;
    -- consumer2.nfService2.operation2.param1
    next(consumer2.nfService2.operation2.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.param1.isSensitive;
        TRUE: consumer2.nfService2.operation2.param1.isSensitive;
    esac;
    next(consumer2.nfService2.operation2.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.param1.name;
        TRUE: consumer2.nfService2.operation2.param1.name;
    esac;
    next(consumer2.nfService2.operation2.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.param1.value;
        TRUE: consumer2.nfService2.operation2.param1.value;
    esac;

    -- consumer2.nfService2.operation2.param2
    next(consumer2.nfService2.operation2.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.param2.isSensitive;
        TRUE: consumer2.nfService2.operation2.param2.isSensitive;
    esac;
    next(consumer2.nfService2.operation2.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.param2.name;
        TRUE: consumer2.nfService2.operation2.param2.name;
    esac;
    next(consumer2.nfService2.operation2.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService2.operation2.param2.value;
        TRUE: consumer2.nfService2.operation2.param2.value;
    esac;




    -- producer1
    next(producer1.model_id) := producer1.model_id;
    next(producer1.CCA_subject) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.CCA_subject;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.CCA_subject;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.CCA_subject;
        TRUE: producer1.CCA_subject;
    esac;
    next(producer1.nfInstanceId) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfInstanceId;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfInstanceId;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfInstanceId;
        TRUE: producer1.nfInstanceId;
    esac;
    next(producer1.nfType) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfType;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfType;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfType;
        TRUE: producer1.nfType;
    esac;
    next(producer1.nfStatus) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfStatus;
        (adversaryPresent & updateLevelProducer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer1.nfStatus;
    esac;
    next(producer1.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.sNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.sNssais[1];
        TRUE: producer1.sNssais[1];
    esac;
    next(producer1.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.sNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.sNssais[2];
        TRUE: producer1.sNssais[2];
    esac;
    next(producer1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.allowedNFTypes[1];
    esac;
    next(producer1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.allowedNFTypes[2];
    esac;
    next(producer1.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.allowedsNssais[1];
    esac;
    next(producer1.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.allowedsNssais[2];
    esac;
    next(producer1.load) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.load;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.load;
    esac;
    next(producer1.capacity) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.capacity;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.capacity;
    esac;
    next(producer1.priority) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.priority;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.priority;
    esac;
    -- producer1.nfService1
    next(producer1.nfService1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService1.allowedNFTypes[1];
    esac;
    next(producer1.nfService1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService1.allowedNFTypes[2];
    esac;
    next(producer1.nfService1.load) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.load;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService1.load;
    esac;
    next(producer1.nfService1.capacity) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.capacity;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService1.capacity;
    esac;
    next(producer1.nfService1.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.oauth2Required;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.oauth2Required;
        TRUE: producer1.nfService1.oauth2Required;
    esac;
    next(producer1.nfService1.priority) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.priority;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService1.priority;
    esac;
    next(producer1.nfService1.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.serviceInstanceId;
        TRUE: producer1.nfService1.serviceInstanceId;
    esac;
    next(producer1.nfService1.serviceName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.serviceName;
        TRUE: producer1.nfService1.serviceName;
    esac;
    next(producer1.nfService1.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.serviceStatus;
        (adversaryPresent & updateLevelProducer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer1.nfService1.serviceStatus;
    esac;
    next(producer1.nfService1.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.sNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.sNssais[1];
        TRUE: producer1.nfService1.sNssais[1];
    esac;
    next(producer1.nfService1.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.sNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.sNssais[2];
        TRUE: producer1.nfService1.sNssais[2];
    esac;
    next(producer1.nfService1.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.nfService1.allowedsNssais[1];
    esac;
    next(producer1.nfService1.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.nfService1.allowedsNssais[2];
    esac;
    -- producer1.nfService1.operation1
    next(producer1.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(producer1.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(producer1.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(producer1.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(producer1.nfService1.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.opName;
        TRUE: producer1.nfService1.operation1.opName;
    esac;
    next(producer1.nfService1.operation1.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.opScope[1];
        TRUE: producer1.nfService1.operation1.opScope[1];
    esac;
    next(producer1.nfService1.operation1.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.opScope[2];
        TRUE: producer1.nfService1.operation1.opScope[2];
    esac;
    -- producer1.nfService1.operation1.param1
    next(producer1.nfService1.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param1.isSensitive;
        TRUE: producer1.nfService1.operation1.param1.isSensitive;
    esac;
    next(producer1.nfService1.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param1.name;
        TRUE: producer1.nfService1.operation1.param1.name;
    esac;
    next(producer1.nfService1.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param1.value;
        TRUE: producer1.nfService1.operation1.param1.value;
    esac;

    -- producer1.nfService1.operation1.param2
    next(producer1.nfService1.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param2.isSensitive;
        TRUE: producer1.nfService1.operation1.param2.isSensitive;
    esac;
    next(producer1.nfService1.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param2.name;
        TRUE: producer1.nfService1.operation1.param2.name;
    esac;
    next(producer1.nfService1.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param2.value;
        TRUE: producer1.nfService1.operation1.param2.value;
    esac;


    -- producer1.nfService1.operation2
    next(producer1.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(producer1.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(producer1.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(producer1.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(producer1.nfService1.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.opName;
        TRUE: producer1.nfService1.operation2.opName;
    esac;
    next(producer1.nfService1.operation2.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.opScope[1];
        TRUE: producer1.nfService1.operation2.opScope[1];
    esac;
    next(producer1.nfService1.operation2.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.opScope[2];
        TRUE: producer1.nfService1.operation2.opScope[2];
    esac;
    -- producer1.nfService1.operation2.param1
    next(producer1.nfService1.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param1.isSensitive;
        TRUE: producer1.nfService1.operation2.param1.isSensitive;
    esac;
    next(producer1.nfService1.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param1.name;
        TRUE: producer1.nfService1.operation2.param1.name;
    esac;
    next(producer1.nfService1.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param1.value;
        TRUE: producer1.nfService1.operation2.param1.value;
    esac;

    -- producer1.nfService1.operation2.param2
    next(producer1.nfService1.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param2.isSensitive;
        TRUE: producer1.nfService1.operation2.param2.isSensitive;
    esac;
    next(producer1.nfService1.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param2.name;
        TRUE: producer1.nfService1.operation2.param2.name;
    esac;
    next(producer1.nfService1.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param2.value;
        TRUE: producer1.nfService1.operation2.param2.value;
    esac;



    -- producer1.nfService2
    next(producer1.nfService2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService2.allowedNFTypes[1];
    esac;
    next(producer1.nfService2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService2.allowedNFTypes[2];
    esac;
    next(producer1.nfService2.load) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.load;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService2.load;
    esac;
    next(producer1.nfService2.capacity) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.capacity;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService2.capacity;
    esac;
    next(producer1.nfService2.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.oauth2Required;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.oauth2Required;
        TRUE: producer1.nfService2.oauth2Required;
    esac;
    next(producer1.nfService2.priority) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.priority;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService2.priority;
    esac;
    next(producer1.nfService2.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.serviceInstanceId;
        TRUE: producer1.nfService2.serviceInstanceId;
    esac;
    next(producer1.nfService2.serviceName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.serviceName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.serviceName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.serviceName;
        TRUE: producer1.nfService2.serviceName;
    esac;
    next(producer1.nfService2.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.serviceStatus;
        (adversaryPresent & updateLevelProducer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer1.nfService2.serviceStatus;
    esac;
    next(producer1.nfService2.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.sNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.sNssais[1];
        TRUE: producer1.nfService2.sNssais[1];
    esac;
    next(producer1.nfService2.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.sNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.sNssais[2];
        TRUE: producer1.nfService2.sNssais[2];
    esac;
    next(producer1.nfService2.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.nfService2.allowedsNssais[1];
    esac;
    next(producer1.nfService2.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.nfService2.allowedsNssais[2];
    esac;
    -- producer1.nfService2.operation1
    next(producer1.nfService2.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(producer1.nfService2.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(producer1.nfService2.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(producer1.nfService2.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(producer1.nfService2.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.opName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.opName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.opName;
        TRUE: producer1.nfService2.operation1.opName;
    esac;
    next(producer1.nfService2.operation1.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.opScope[1];
        TRUE: producer1.nfService2.operation1.opScope[1];
    esac;
    next(producer1.nfService2.operation1.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.opScope[2];
        TRUE: producer1.nfService2.operation1.opScope[2];
    esac;
    -- producer1.nfService2.operation1.param1
    next(producer1.nfService2.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.param1.isSensitive;
        TRUE: producer1.nfService2.operation1.param1.isSensitive;
    esac;
    next(producer1.nfService2.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.param1.name;
        TRUE: producer1.nfService2.operation1.param1.name;
    esac;
    next(producer1.nfService2.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.param1.value;
        TRUE: producer1.nfService2.operation1.param1.value;
    esac;

    -- producer1.nfService2.operation1.param2
    next(producer1.nfService2.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.param2.isSensitive;
        TRUE: producer1.nfService2.operation1.param2.isSensitive;
    esac;
    next(producer1.nfService2.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.param2.name;
        TRUE: producer1.nfService2.operation1.param2.name;
    esac;
    next(producer1.nfService2.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation1.param2.value;
        TRUE: producer1.nfService2.operation1.param2.value;
    esac;


    -- producer1.nfService2.operation2
    next(producer1.nfService2.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(producer1.nfService2.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer1.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(producer1.nfService2.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(producer1.nfService2.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer1.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(producer1.nfService2.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.opName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.opName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.opName;
        TRUE: producer1.nfService2.operation2.opName;
    esac;
    next(producer1.nfService2.operation2.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.opScope[1];
        TRUE: producer1.nfService2.operation2.opScope[1];
    esac;
    next(producer1.nfService2.operation2.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.opScope[2];
        TRUE: producer1.nfService2.operation2.opScope[2];
    esac;
    -- producer1.nfService2.operation2.param1
    next(producer1.nfService2.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.param1.isSensitive;
        TRUE: producer1.nfService2.operation2.param1.isSensitive;
    esac;
    next(producer1.nfService2.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.param1.name;
        TRUE: producer1.nfService2.operation2.param1.name;
    esac;
    next(producer1.nfService2.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.param1.value;
        TRUE: producer1.nfService2.operation2.param1.value;
    esac;

    -- producer1.nfService2.operation2.param2
    next(producer1.nfService2.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.param2.isSensitive;
        TRUE: producer1.nfService2.operation2.param2.isSensitive;
    esac;
    next(producer1.nfService2.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.param2.name;
        TRUE: producer1.nfService2.operation2.param2.name;
    esac;
    next(producer1.nfService2.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService2.operation2.param2.value;
        TRUE: producer1.nfService2.operation2.param2.value;
    esac;




    -- producer2
    next(producer2.model_id) := producer2.model_id;
    next(producer2.CCA_subject) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.CCA_subject;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.CCA_subject;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.CCA_subject;
        TRUE: producer2.CCA_subject;
    esac;
    next(producer2.nfInstanceId) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfInstanceId;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfInstanceId;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfInstanceId;
        TRUE: producer2.nfInstanceId;
    esac;
    next(producer2.nfType) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfType;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfType;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfType;
        TRUE: producer2.nfType;
    esac;
    next(producer2.nfStatus) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfStatus;
        (adversaryPresent & updateLevelProducer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer2.nfStatus;
    esac;
    next(producer2.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.sNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.sNssais[1];
        TRUE: producer2.sNssais[1];
    esac;
    next(producer2.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.sNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.sNssais[2];
        TRUE: producer2.sNssais[2];
    esac;
    next(producer2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.allowedNFTypes[1];
    esac;
    next(producer2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.allowedNFTypes[2];
    esac;
    next(producer2.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.allowedsNssais[1];
    esac;
    next(producer2.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.allowedsNssais[2];
    esac;
    next(producer2.load) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.load;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.load;
    esac;
    next(producer2.capacity) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.capacity;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.capacity;
    esac;
    next(producer2.priority) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.priority;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.priority;
    esac;
    -- producer2.nfService1
    next(producer2.nfService1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService1.allowedNFTypes[1];
    esac;
    next(producer2.nfService1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService1.allowedNFTypes[2];
    esac;
    next(producer2.nfService1.load) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.load;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService1.load;
    esac;
    next(producer2.nfService1.capacity) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.capacity;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService1.capacity;
    esac;
    next(producer2.nfService1.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.oauth2Required;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.oauth2Required;
        TRUE: producer2.nfService1.oauth2Required;
    esac;
    next(producer2.nfService1.priority) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.priority;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService1.priority;
    esac;
    next(producer2.nfService1.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.serviceInstanceId;
        TRUE: producer2.nfService1.serviceInstanceId;
    esac;
    next(producer2.nfService1.serviceName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.serviceName;
        TRUE: producer2.nfService1.serviceName;
    esac;
    next(producer2.nfService1.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.serviceStatus;
        (adversaryPresent & updateLevelProducer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer2.nfService1.serviceStatus;
    esac;
    next(producer2.nfService1.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.sNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.sNssais[1];
        TRUE: producer2.nfService1.sNssais[1];
    esac;
    next(producer2.nfService1.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.sNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.sNssais[2];
        TRUE: producer2.nfService1.sNssais[2];
    esac;
    next(producer2.nfService1.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.nfService1.allowedsNssais[1];
    esac;
    next(producer2.nfService1.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.nfService1.allowedsNssais[2];
    esac;
    -- producer2.nfService1.operation1
    next(producer2.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(producer2.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(producer2.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(producer2.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(producer2.nfService1.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.opName;
        TRUE: producer2.nfService1.operation1.opName;
    esac;
    next(producer2.nfService1.operation1.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.opScope[1];
        TRUE: producer2.nfService1.operation1.opScope[1];
    esac;
    next(producer2.nfService1.operation1.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.opScope[2];
        TRUE: producer2.nfService1.operation1.opScope[2];
    esac;
    -- producer2.nfService1.operation1.param1
    next(producer2.nfService1.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param1.isSensitive;
        TRUE: producer2.nfService1.operation1.param1.isSensitive;
    esac;
    next(producer2.nfService1.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param1.name;
        TRUE: producer2.nfService1.operation1.param1.name;
    esac;
    next(producer2.nfService1.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param1.value;
        TRUE: producer2.nfService1.operation1.param1.value;
    esac;

    -- producer2.nfService1.operation1.param2
    next(producer2.nfService1.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param2.isSensitive;
        TRUE: producer2.nfService1.operation1.param2.isSensitive;
    esac;
    next(producer2.nfService1.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param2.name;
        TRUE: producer2.nfService1.operation1.param2.name;
    esac;
    next(producer2.nfService1.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param2.value;
        TRUE: producer2.nfService1.operation1.param2.value;
    esac;


    -- producer2.nfService1.operation2
    next(producer2.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(producer2.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(producer2.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(producer2.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(producer2.nfService1.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.opName;
        TRUE: producer2.nfService1.operation2.opName;
    esac;
    next(producer2.nfService1.operation2.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.opScope[1];
        TRUE: producer2.nfService1.operation2.opScope[1];
    esac;
    next(producer2.nfService1.operation2.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.opScope[2];
        TRUE: producer2.nfService1.operation2.opScope[2];
    esac;
    -- producer2.nfService1.operation2.param1
    next(producer2.nfService1.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param1.isSensitive;
        TRUE: producer2.nfService1.operation2.param1.isSensitive;
    esac;
    next(producer2.nfService1.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param1.name;
        TRUE: producer2.nfService1.operation2.param1.name;
    esac;
    next(producer2.nfService1.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param1.value;
        TRUE: producer2.nfService1.operation2.param1.value;
    esac;

    -- producer2.nfService1.operation2.param2
    next(producer2.nfService1.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param2.isSensitive;
        TRUE: producer2.nfService1.operation2.param2.isSensitive;
    esac;
    next(producer2.nfService1.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param2.name;
        TRUE: producer2.nfService1.operation2.param2.name;
    esac;
    next(producer2.nfService1.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param2.value;
        TRUE: producer2.nfService1.operation2.param2.value;
    esac;



    -- producer2.nfService2
    next(producer2.nfService2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService2.allowedNFTypes[1];
    esac;
    next(producer2.nfService2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService2.allowedNFTypes[2];
    esac;
    next(producer2.nfService2.load) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.load;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService2.load;
    esac;
    next(producer2.nfService2.capacity) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.capacity;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService2.capacity;
    esac;
    next(producer2.nfService2.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.oauth2Required;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.oauth2Required;
        TRUE: producer2.nfService2.oauth2Required;
    esac;
    next(producer2.nfService2.priority) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.priority;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService2.priority;
    esac;
    next(producer2.nfService2.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.serviceInstanceId;
        TRUE: producer2.nfService2.serviceInstanceId;
    esac;
    next(producer2.nfService2.serviceName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.serviceName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.serviceName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.serviceName;
        TRUE: producer2.nfService2.serviceName;
    esac;
    next(producer2.nfService2.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.serviceStatus;
        (adversaryPresent & updateLevelProducer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer2.nfService2.serviceStatus;
    esac;
    next(producer2.nfService2.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.sNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.sNssais[1];
        TRUE: producer2.nfService2.sNssais[1];
    esac;
    next(producer2.nfService2.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.sNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.sNssais[2];
        TRUE: producer2.nfService2.sNssais[2];
    esac;
    next(producer2.nfService2.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.nfService2.allowedsNssais[1];
    esac;
    next(producer2.nfService2.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.nfService2.allowedsNssais[2];
    esac;
    -- producer2.nfService2.operation1
    next(producer2.nfService2.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(producer2.nfService2.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(producer2.nfService2.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(producer2.nfService2.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(producer2.nfService2.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.opName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.opName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.opName;
        TRUE: producer2.nfService2.operation1.opName;
    esac;
    next(producer2.nfService2.operation1.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.opScope[1];
        TRUE: producer2.nfService2.operation1.opScope[1];
    esac;
    next(producer2.nfService2.operation1.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.opScope[2];
        TRUE: producer2.nfService2.operation1.opScope[2];
    esac;
    -- producer2.nfService2.operation1.param1
    next(producer2.nfService2.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.param1.isSensitive;
        TRUE: producer2.nfService2.operation1.param1.isSensitive;
    esac;
    next(producer2.nfService2.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.param1.name;
        TRUE: producer2.nfService2.operation1.param1.name;
    esac;
    next(producer2.nfService2.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.param1.value;
        TRUE: producer2.nfService2.operation1.param1.value;
    esac;

    -- producer2.nfService2.operation1.param2
    next(producer2.nfService2.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.param2.isSensitive;
        TRUE: producer2.nfService2.operation1.param2.isSensitive;
    esac;
    next(producer2.nfService2.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.param2.name;
        TRUE: producer2.nfService2.operation1.param2.name;
    esac;
    next(producer2.nfService2.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation1.param2.value;
        TRUE: producer2.nfService2.operation1.param2.value;
    esac;


    -- producer2.nfService2.operation2
    next(producer2.nfService2.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(producer2.nfService2.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer2.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(producer2.nfService2.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(producer2.nfService2.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer2.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(producer2.nfService2.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.opName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.opName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.opName;
        TRUE: producer2.nfService2.operation2.opName;
    esac;
    next(producer2.nfService2.operation2.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.opScope[1];
        TRUE: producer2.nfService2.operation2.opScope[1];
    esac;
    next(producer2.nfService2.operation2.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.opScope[2];
        TRUE: producer2.nfService2.operation2.opScope[2];
    esac;
    -- producer2.nfService2.operation2.param1
    next(producer2.nfService2.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.param1.isSensitive;
        TRUE: producer2.nfService2.operation2.param1.isSensitive;
    esac;
    next(producer2.nfService2.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.param1.name;
        TRUE: producer2.nfService2.operation2.param1.name;
    esac;
    next(producer2.nfService2.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.param1.value;
        TRUE: producer2.nfService2.operation2.param1.value;
    esac;

    -- producer2.nfService2.operation2.param2
    next(producer2.nfService2.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.param2.isSensitive;
        TRUE: producer2.nfService2.operation2.param2.isSensitive;
    esac;
    next(producer2.nfService2.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.param2.name;
        TRUE: producer2.nfService2.operation2.param2.name;
    esac;
    next(producer2.nfService2.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService2.operation2.param2.value;
        TRUE: producer2.nfService2.operation2.param2.value;
    esac;




    -- producer3
    next(producer3.model_id) := producer3.model_id;
    next(producer3.CCA_subject) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.CCA_subject;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.CCA_subject;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.CCA_subject;
        TRUE: producer3.CCA_subject;
    esac;
    next(producer3.nfInstanceId) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfInstanceId;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfInstanceId;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfInstanceId;
        TRUE: producer3.nfInstanceId;
    esac;
    next(producer3.nfType) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfType;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfType;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfType;
        TRUE: producer3.nfType;
    esac;
    next(producer3.nfStatus) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfStatus;
        (adversaryPresent & updateLevelProducer3 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer3 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer3 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer3.nfStatus;
    esac;
    next(producer3.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.sNssais[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.sNssais[1];
        TRUE: producer3.sNssais[1];
    esac;
    next(producer3.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.sNssais[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.sNssais[2];
        TRUE: producer3.sNssais[2];
    esac;
    next(producer3.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.allowedNFTypes[1];
    esac;
    next(producer3.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.allowedNFTypes[2];
    esac;
    next(producer3.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3};
        TRUE: producer3.allowedsNssais[1];
    esac;
    next(producer3.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3};
        TRUE: producer3.allowedsNssais[2];
    esac;
    next(producer3.load) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.load;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.load;
    esac;
    next(producer3.capacity) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.capacity;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.capacity;
    esac;
    next(producer3.priority) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.priority;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.priority;
    esac;
    -- producer3.nfService1
    next(producer3.nfService1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService1.allowedNFTypes[1];
    esac;
    next(producer3.nfService1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService1.allowedNFTypes[2];
    esac;
    next(producer3.nfService1.load) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.load;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.nfService1.load;
    esac;
    next(producer3.nfService1.capacity) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.capacity;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.nfService1.capacity;
    esac;
    next(producer3.nfService1.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.oauth2Required;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.oauth2Required;
        TRUE: producer3.nfService1.oauth2Required;
    esac;
    next(producer3.nfService1.priority) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.priority;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.nfService1.priority;
    esac;
    next(producer3.nfService1.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.serviceInstanceId;
        TRUE: producer3.nfService1.serviceInstanceId;
    esac;
    next(producer3.nfService1.serviceName) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.serviceName;
        TRUE: producer3.nfService1.serviceName;
    esac;
    next(producer3.nfService1.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.serviceStatus;
        (adversaryPresent & updateLevelProducer3 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer3 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer3 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer3.nfService1.serviceStatus;
    esac;
    next(producer3.nfService1.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.sNssais[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.sNssais[1];
        TRUE: producer3.nfService1.sNssais[1];
    esac;
    next(producer3.nfService1.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.sNssais[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.sNssais[2];
        TRUE: producer3.nfService1.sNssais[2];
    esac;
    next(producer3.nfService1.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3};
        TRUE: producer3.nfService1.allowedsNssais[1];
    esac;
    next(producer3.nfService1.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3};
        TRUE: producer3.nfService1.allowedsNssais[2];
    esac;
    -- producer3.nfService1.operation1
    next(producer3.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(producer3.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(producer3.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(producer3.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(producer3.nfService1.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.opName;
        TRUE: producer3.nfService1.operation1.opName;
    esac;
    next(producer3.nfService1.operation1.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.opScope[1];
        TRUE: producer3.nfService1.operation1.opScope[1];
    esac;
    next(producer3.nfService1.operation1.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.opScope[2];
        TRUE: producer3.nfService1.operation1.opScope[2];
    esac;
    -- producer3.nfService1.operation1.param1
    next(producer3.nfService1.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.param1.isSensitive;
        TRUE: producer3.nfService1.operation1.param1.isSensitive;
    esac;
    next(producer3.nfService1.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.param1.name;
        TRUE: producer3.nfService1.operation1.param1.name;
    esac;
    next(producer3.nfService1.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.param1.value;
        TRUE: producer3.nfService1.operation1.param1.value;
    esac;

    -- producer3.nfService1.operation1.param2
    next(producer3.nfService1.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.param2.isSensitive;
        TRUE: producer3.nfService1.operation1.param2.isSensitive;
    esac;
    next(producer3.nfService1.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.param2.name;
        TRUE: producer3.nfService1.operation1.param2.name;
    esac;
    next(producer3.nfService1.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation1.param2.value;
        TRUE: producer3.nfService1.operation1.param2.value;
    esac;


    -- producer3.nfService1.operation2
    next(producer3.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(producer3.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(producer3.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(producer3.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(producer3.nfService1.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.opName;
        TRUE: producer3.nfService1.operation2.opName;
    esac;
    next(producer3.nfService1.operation2.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.opScope[1];
        TRUE: producer3.nfService1.operation2.opScope[1];
    esac;
    next(producer3.nfService1.operation2.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.opScope[2];
        TRUE: producer3.nfService1.operation2.opScope[2];
    esac;
    -- producer3.nfService1.operation2.param1
    next(producer3.nfService1.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.param1.isSensitive;
        TRUE: producer3.nfService1.operation2.param1.isSensitive;
    esac;
    next(producer3.nfService1.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.param1.name;
        TRUE: producer3.nfService1.operation2.param1.name;
    esac;
    next(producer3.nfService1.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.param1.value;
        TRUE: producer3.nfService1.operation2.param1.value;
    esac;

    -- producer3.nfService1.operation2.param2
    next(producer3.nfService1.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.param2.isSensitive;
        TRUE: producer3.nfService1.operation2.param2.isSensitive;
    esac;
    next(producer3.nfService1.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.param2.name;
        TRUE: producer3.nfService1.operation2.param2.name;
    esac;
    next(producer3.nfService1.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService1.operation2.param2.value;
        TRUE: producer3.nfService1.operation2.param2.value;
    esac;



    -- producer3.nfService2
    next(producer3.nfService2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService2.allowedNFTypes[1];
    esac;
    next(producer3.nfService2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService2.allowedNFTypes[2];
    esac;
    next(producer3.nfService2.load) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.load;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.nfService2.load;
    esac;
    next(producer3.nfService2.capacity) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.capacity;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.nfService2.capacity;
    esac;
    next(producer3.nfService2.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.oauth2Required;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.oauth2Required;
        TRUE: producer3.nfService2.oauth2Required;
    esac;
    next(producer3.nfService2.priority) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.priority;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer3 = 3) : 0..10;
        TRUE: producer3.nfService2.priority;
    esac;
    next(producer3.nfService2.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 32, 41, 42, 11, 12, 51, 52, 21, 22, 31};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.serviceInstanceId;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.serviceInstanceId;
        TRUE: producer3.nfService2.serviceInstanceId;
    esac;
    next(producer3.nfService2.serviceName) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.serviceName;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.serviceName;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.serviceName;
        TRUE: producer3.nfService2.serviceName;
    esac;
    next(producer3.nfService2.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.serviceStatus;
        (adversaryPresent & updateLevelProducer3 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer3 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer3 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer3.nfService2.serviceStatus;
    esac;
    next(producer3.nfService2.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.sNssais[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.sNssais[1];
        TRUE: producer3.nfService2.sNssais[1];
    esac;
    next(producer3.nfService2.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.sNssais[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.sNssais[2];
        TRUE: producer3.nfService2.sNssais[2];
    esac;
    next(producer3.nfService2.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3};
        TRUE: producer3.nfService2.allowedsNssais[1];
    esac;
    next(producer3.nfService2.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3};
        TRUE: producer3.nfService2.allowedsNssais[2];
    esac;
    -- producer3.nfService2.operation1
    next(producer3.nfService2.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(producer3.nfService2.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(producer3.nfService2.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(producer3.nfService2.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(producer3.nfService2.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.opName;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.opName;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.opName;
        TRUE: producer3.nfService2.operation1.opName;
    esac;
    next(producer3.nfService2.operation1.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.opScope[1];
        TRUE: producer3.nfService2.operation1.opScope[1];
    esac;
    next(producer3.nfService2.operation1.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.opScope[2];
        TRUE: producer3.nfService2.operation1.opScope[2];
    esac;
    -- producer3.nfService2.operation1.param1
    next(producer3.nfService2.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.param1.isSensitive;
        TRUE: producer3.nfService2.operation1.param1.isSensitive;
    esac;
    next(producer3.nfService2.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.param1.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.param1.name;
        TRUE: producer3.nfService2.operation1.param1.name;
    esac;
    next(producer3.nfService2.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.param1.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.param1.value;
        TRUE: producer3.nfService2.operation1.param1.value;
    esac;

    -- producer3.nfService2.operation1.param2
    next(producer3.nfService2.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.param2.isSensitive;
        TRUE: producer3.nfService2.operation1.param2.isSensitive;
    esac;
    next(producer3.nfService2.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.param2.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.param2.name;
        TRUE: producer3.nfService2.operation1.param2.name;
    esac;
    next(producer3.nfService2.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation1.param2.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation1.param2.value;
        TRUE: producer3.nfService2.operation1.param2.value;
    esac;


    -- producer3.nfService2.operation2
    next(producer3.nfService2.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(producer3.nfService2.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, 1, 2, 3, 4, 5};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, 1, 2, 3, 4, 5};
        TRUE: producer3.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(producer3.nfService2.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(producer3.nfService2.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 2) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (adversaryPresent & updateLevelProducer3 = 3) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: producer3.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(producer3.nfService2.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.opName;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.opName;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.opName;
        TRUE: producer3.nfService2.operation2.opName;
    esac;
    next(producer3.nfService2.operation2.opScope[1]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.opScope[1];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.opScope[1];
        TRUE: producer3.nfService2.operation2.opScope[1];
    esac;
    next(producer3.nfService2.operation2.opScope[2]) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 1) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.opScope[2];
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.opScope[2];
        TRUE: producer3.nfService2.operation2.opScope[2];
    esac;
    -- producer3.nfService2.operation2.param1
    next(producer3.nfService2.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.param1.isSensitive;
        TRUE: producer3.nfService2.operation2.param1.isSensitive;
    esac;
    next(producer3.nfService2.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.param1.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.param1.name;
        TRUE: producer3.nfService2.operation2.param1.name;
    esac;
    next(producer3.nfService2.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.param1.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.param1.value;
        TRUE: producer3.nfService2.operation2.param1.value;
    esac;

    -- producer3.nfService2.operation2.param2
    next(producer3.nfService2.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.param2.isSensitive;
        TRUE: producer3.nfService2.operation2.param2.isSensitive;
    esac;
    next(producer3.nfService2.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelProducer3 = 1) : {none, UNSPECIFIED, ueId, ueContextId, shared-data-ids, supi, smContextRef, subId};
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.param2.name;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.param2.name;
        TRUE: producer3.nfService2.operation2.param2.name;
    esac;
    next(producer3.nfService2.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer3Approve) : producer3.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelProducer3 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer3 = 2) : producer3.nfService2.operation2.param2.value;
        (adversaryPresent & updateLevelProducer3 = 3) : producer3.nfService2.operation2.param2.value;
        TRUE: producer3.nfService2.operation2.param2.value;
    esac;




MODULE protocol(consumer1,consumer2,producer1,producer2,producer3,reqForSpecificProducer,OAMConsumerPresent,OAMProducerPresent,OAMConsumer1Approve,OAMConsumer2Approve,OAMProducer1Approve,OAMProducer2Approve,OAMProducer3Approve,updateConsumer1,updateConsumer2,benignUpdateConsumer,updateProducer1,updateProducer2,updateProducer3,benignUpdateProducer,adversaryPresent,adversaryUpdateConsumer1,adversaryUpdateConsumer2,adversaryUpdateProducer1,adversaryUpdateProducer2,adversaryUpdateProducer3,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,updateDiscoveryRequest,updateATRequest,updateServiceRequest,disableOptionalParams_AT)


VAR
    --------- Structures ----------------
    consumer : NF; -- id , type, nfStatus
    producer : NF; -- producer's nf profile available to both producer & NRF
    prod_at_consumer : NF; -- producer's nf profile available to consumer
    
    nfDiscoveryRequest: NFDiscoveryRequest; -- target, requester; service optoional
    accessTokenRequest : AccessTokenRequest(reqForSpecificProducer);
    accessToken : AccessToken(reqForSpecificProducer);
    serviceRequest: ServiceRequest;

    --------- State variable ----------------
    initConsumer: boolean;
    initDiscoveryRequest: boolean;
    initProducer: boolean;
    initATRequest: boolean;
    initServiceRequest: boolean;

    -- random variable for choosing consumers and producers from multiple candidates
    selectProducer : 1..3; -- for producer1 selection
    selectConsumer : 1..2; -- for consumer selection

    
DEFINE
    foundNF := isNFDiscovered1 | isNFDiscovered2 | isNFDiscovered3;


    isNFDiscovered1 := case
        -- modeling related extra check
        nfDiscoveryRequest.isNFDiscReqValid
        & consumer.isNFInstanceValid
        & producer1.isNFInstanceValid
        -- foundNF = FALSE & isNFDiscovered1 = FALSE -- force nfdiscovery to occur only once. TODO may need change     
        
        -- NF Discovery main argument check 
        -- & consumer.nfInstanceId = nfDiscoveryRequest.requesterID
        & nfDiscoveryRequest.requesterID != producer1.nfInstanceId  -- prohibit nf to discover itself

        & nfDiscoveryRequest.targetNFType = producer1.nfType
        /-- 
        nfDicovery request parameter optional filters check (No security check here)
        if the service name is NOT present in discovery req, all optional checks will be performed on NF level
        --/
        -- if targetNfInstanceId is present in nfDiscoveryRequest, then check targetNfInstanceId
        & (
            (nfDiscoveryRequest.targetNfInstanceId != none)->
                nfDiscoveryRequest.targetNfInstanceId = producer1.nfInstanceId
        )
        & ((nfDiscoveryRequest.serviceName = none) ->
            (
                (!(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) -> ( 
                    nfDiscoveryRequest.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]}
                ))
                &
                -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                (
                    (nfDiscoveryRequest.sNssais != none & ( !(producer1.sNssais[1] = none & producer1.sNssais[2] = none) ) )->
                        (nfDiscoveryRequest.sNssais in {producer1.sNssais[1], producer1.sNssais[2]})
                )
                -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                & (
                    (nfDiscoveryRequest.requesterSNssais != none & ( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ) )->
                        (nfDiscoveryRequest.requesterSNssais in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                )
            )
        )
        /--if the service name is present in discovery req, all service level check will be performed
        algo:
        if (serviceName  is present), then
            for (each service),
                if nfDiscoveryRequest parameter presents
                    if a service level parameter is present and not none (TODO problematic as no way to differentiate present and not none)
                        try to perform service-level check
                    else if an nf parameter is present and not none
                        try to perform nf-level check if availble
        --/
        & ( (nfDiscoveryRequest.serviceName != none)-> 
            (
                (nfDiscoveryRequest.serviceName in {producer1.nfService1.serviceName, producer1.nfService2.serviceName})
                &
                -- for producer1.nfService1.serviceName ...
                (nfDiscoveryRequest.serviceName = producer1.nfService1.serviceName ->
                    (   
                        -- service must be valid
                        producer1.nfService1.isServiceInstanceValid
                        &
                        -- if service.allowedNFtypes present, perform check at service level
                        (( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
                            --  only check service.allowedNFtypes regarless of the presence of producer1.allowedNFtypes
                                (nfDiscoveryRequest.requesterNFType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
                        ))
                        &
                        -- else: (i.e. if service.allowedNFtypes not present ) perform check at nf level
                        ((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
                            --  if nf.allowedNFtypes present
                            (( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
                                    -- perform nf level nfType check
                                    (nfDiscoveryRequest.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
                            )) -- else TRUE, but now check slices (no need to write code)
                        ))
                        &
                        -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                        (
                            (   -- if producer1.nfService1.sNssais not none, then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( !(producer1.nfService1.sNssais[1] = none & producer1.nfService1.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer1.nfService1.sNssais[1], producer1.nfService1.sNssais[2]}
                            )
                            & ( -- if producer1.nfService1.sNssais are none but producer1.sNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer1.nfService1.sNssais[1] = none & producer1.nfService1.sNssais[2] = none ) & ( !(producer1.sNssais[1] = none & producer1.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer1.sNssais[1], producer1.sNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                        -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                        & (
                            (   -- if producer1.nfService1.allowedsNssais not none, then check nf-level
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]}
                            )
                            & ( -- if producer1.nfService1.allowedsNssais are none but producer1.allowedsNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none ) & ( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                    )
                ) 
                &
                -- for producer1.nfService2.serviceName ...
                (nfDiscoveryRequest.serviceName = producer1.nfService2.serviceName ->
                    (   
                        -- service must be valid
                        producer1.nfService2.isServiceInstanceValid
                        &
                        -- if service.allowedNFtypes present, perform check at service level
                        (( !(producer1.nfService2.allowedNFTypes[1] = none & producer1.nfService2.allowedNFTypes[2] = none) )-> (
                            --  only check service.allowedNFtypes regarless of the presence of producer1.allowedNFtypes
                                (nfDiscoveryRequest.requesterNFType in {producer1.nfService2.allowedNFTypes[1], producer1.nfService2.allowedNFTypes[2]})
                        ))
                        &
                        -- else: (i.e. if service.allowedNFtypes not present ) perform check at nf level
                        ((producer1.nfService2.allowedNFTypes[1] = none & producer1.nfService2.allowedNFTypes[2] = none) -> (
                            --  if nf.allowedNFtypes present
                            (( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
                                    -- perform nf level nfType check
                                    (nfDiscoveryRequest.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
                            )) -- else TRUE, but now check slices (no need to write code)
                        ))
                        &
                        -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                        (
                            (   -- if producer1.nfService2.sNssais not none, then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( !(producer1.nfService2.sNssais[1] = none & producer1.nfService2.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer1.nfService2.sNssais[1], producer1.nfService2.sNssais[2]}
                            )
                            & ( -- if producer1.nfService2.sNssais are none but producer1.sNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer1.nfService2.sNssais[1] = none & producer1.nfService2.sNssais[2] = none ) & ( !(producer1.sNssais[1] = none & producer1.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer1.sNssais[1], producer1.sNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                        -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                        & (
                            (   -- if producer1.nfService2.allowedsNssais not none, then check nf-level
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer1.nfService2.allowedsNssais[1] = none & producer1.nfService2.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer1.nfService2.allowedsNssais[1], producer1.nfService2.allowedsNssais[2]}
                            )
                            & ( -- if producer1.nfService2.allowedsNssais are none but producer1.allowedsNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer1.nfService2.allowedsNssais[1] = none & producer1.nfService2.allowedsNssais[2] = none ) & ( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                    )
                ) 
            )  
        )
            : TRUE;
        TRUE: FALSE; -- isNFDiscovered{i};
    esac;


    isNFDiscovered2 := case
        -- modeling related extra check
        nfDiscoveryRequest.isNFDiscReqValid
        & consumer.isNFInstanceValid
        & producer2.isNFInstanceValid
        -- foundNF = FALSE & isNFDiscovered1 = FALSE -- force nfdiscovery to occur only once. TODO may need change     
        
        -- NF Discovery main argument check 
        -- & consumer.nfInstanceId = nfDiscoveryRequest.requesterID
        & nfDiscoveryRequest.requesterID != producer2.nfInstanceId  -- prohibit nf to discover itself

        & nfDiscoveryRequest.targetNFType = producer2.nfType
        /-- 
        nfDicovery request parameter optional filters check (No security check here)
        if the service name is NOT present in discovery req, all optional checks will be performed on NF level
        --/
        -- if targetNfInstanceId is present in nfDiscoveryRequest, then check targetNfInstanceId
        & (
            (nfDiscoveryRequest.targetNfInstanceId != none)->
                nfDiscoveryRequest.targetNfInstanceId = producer2.nfInstanceId
        )
        & ((nfDiscoveryRequest.serviceName = none) ->
            (
                (!(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) -> ( 
                    nfDiscoveryRequest.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]}
                ))
                &
                -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                (
                    (nfDiscoveryRequest.sNssais != none & ( !(producer2.sNssais[1] = none & producer2.sNssais[2] = none) ) )->
                        (nfDiscoveryRequest.sNssais in {producer2.sNssais[1], producer2.sNssais[2]})
                )
                -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                & (
                    (nfDiscoveryRequest.requesterSNssais != none & ( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ) )->
                        (nfDiscoveryRequest.requesterSNssais in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                )
            )
        )
        /--if the service name is present in discovery req, all service level check will be performed
        algo:
        if (serviceName  is present), then
            for (each service),
                if nfDiscoveryRequest parameter presents
                    if a service level parameter is present and not none (TODO problematic as no way to differentiate present and not none)
                        try to perform service-level check
                    else if an nf parameter is present and not none
                        try to perform nf-level check if availble
        --/
        & ( (nfDiscoveryRequest.serviceName != none)-> 
            (
                (nfDiscoveryRequest.serviceName in {producer2.nfService1.serviceName, producer2.nfService2.serviceName})
                &
                -- for producer2.nfService1.serviceName ...
                (nfDiscoveryRequest.serviceName = producer2.nfService1.serviceName ->
                    (   
                        -- service must be valid
                        producer2.nfService1.isServiceInstanceValid
                        &
                        -- if service.allowedNFtypes present, perform check at service level
                        (( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
                            --  only check service.allowedNFtypes regarless of the presence of producer2.allowedNFtypes
                                (nfDiscoveryRequest.requesterNFType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
                        ))
                        &
                        -- else: (i.e. if service.allowedNFtypes not present ) perform check at nf level
                        ((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
                            --  if nf.allowedNFtypes present
                            (( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
                                    -- perform nf level nfType check
                                    (nfDiscoveryRequest.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
                            )) -- else TRUE, but now check slices (no need to write code)
                        ))
                        &
                        -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                        (
                            (   -- if producer2.nfService1.sNssais not none, then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( !(producer2.nfService1.sNssais[1] = none & producer2.nfService1.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer2.nfService1.sNssais[1], producer2.nfService1.sNssais[2]}
                            )
                            & ( -- if producer2.nfService1.sNssais are none but producer2.sNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer2.nfService1.sNssais[1] = none & producer2.nfService1.sNssais[2] = none ) & ( !(producer2.sNssais[1] = none & producer2.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer2.sNssais[1], producer2.sNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                        -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                        & (
                            (   -- if producer2.nfService1.allowedsNssais not none, then check nf-level
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]}
                            )
                            & ( -- if producer2.nfService1.allowedsNssais are none but producer2.allowedsNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none ) & ( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                    )
                ) 
                &
                -- for producer2.nfService2.serviceName ...
                (nfDiscoveryRequest.serviceName = producer2.nfService2.serviceName ->
                    (   
                        -- service must be valid
                        producer2.nfService2.isServiceInstanceValid
                        &
                        -- if service.allowedNFtypes present, perform check at service level
                        (( !(producer2.nfService2.allowedNFTypes[1] = none & producer2.nfService2.allowedNFTypes[2] = none) )-> (
                            --  only check service.allowedNFtypes regarless of the presence of producer2.allowedNFtypes
                                (nfDiscoveryRequest.requesterNFType in {producer2.nfService2.allowedNFTypes[1], producer2.nfService2.allowedNFTypes[2]})
                        ))
                        &
                        -- else: (i.e. if service.allowedNFtypes not present ) perform check at nf level
                        ((producer2.nfService2.allowedNFTypes[1] = none & producer2.nfService2.allowedNFTypes[2] = none) -> (
                            --  if nf.allowedNFtypes present
                            (( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
                                    -- perform nf level nfType check
                                    (nfDiscoveryRequest.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
                            )) -- else TRUE, but now check slices (no need to write code)
                        ))
                        &
                        -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                        (
                            (   -- if producer2.nfService2.sNssais not none, then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( !(producer2.nfService2.sNssais[1] = none & producer2.nfService2.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer2.nfService2.sNssais[1], producer2.nfService2.sNssais[2]}
                            )
                            & ( -- if producer2.nfService2.sNssais are none but producer2.sNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer2.nfService2.sNssais[1] = none & producer2.nfService2.sNssais[2] = none ) & ( !(producer2.sNssais[1] = none & producer2.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer2.sNssais[1], producer2.sNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                        -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                        & (
                            (   -- if producer2.nfService2.allowedsNssais not none, then check nf-level
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer2.nfService2.allowedsNssais[1] = none & producer2.nfService2.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer2.nfService2.allowedsNssais[1], producer2.nfService2.allowedsNssais[2]}
                            )
                            & ( -- if producer2.nfService2.allowedsNssais are none but producer2.allowedsNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer2.nfService2.allowedsNssais[1] = none & producer2.nfService2.allowedsNssais[2] = none ) & ( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                    )
                ) 
            )  
        )
            : TRUE;
        TRUE: FALSE; -- isNFDiscovered{i};
    esac;


    isNFDiscovered3 := case
        -- modeling related extra check
        nfDiscoveryRequest.isNFDiscReqValid
        & consumer.isNFInstanceValid
        & producer3.isNFInstanceValid
        -- foundNF = FALSE & isNFDiscovered1 = FALSE -- force nfdiscovery to occur only once. TODO may need change     
        
        -- NF Discovery main argument check 
        -- & consumer.nfInstanceId = nfDiscoveryRequest.requesterID
        & nfDiscoveryRequest.requesterID != producer3.nfInstanceId  -- prohibit nf to discover itself

        & nfDiscoveryRequest.targetNFType = producer3.nfType
        /-- 
        nfDicovery request parameter optional filters check (No security check here)
        if the service name is NOT present in discovery req, all optional checks will be performed on NF level
        --/
        -- if targetNfInstanceId is present in nfDiscoveryRequest, then check targetNfInstanceId
        & (
            (nfDiscoveryRequest.targetNfInstanceId != none)->
                nfDiscoveryRequest.targetNfInstanceId = producer3.nfInstanceId
        )
        & ((nfDiscoveryRequest.serviceName = none) ->
            (
                (!(producer3.allowedNFTypes[1] = none & producer3.allowedNFTypes[2] = none) -> ( 
                    nfDiscoveryRequest.requesterNFType in {producer3.allowedNFTypes[1], producer3.allowedNFTypes[2]}
                ))
                &
                -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                (
                    (nfDiscoveryRequest.sNssais != none & ( !(producer3.sNssais[1] = none & producer3.sNssais[2] = none) ) )->
                        (nfDiscoveryRequest.sNssais in {producer3.sNssais[1], producer3.sNssais[2]})
                )
                -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                & (
                    (nfDiscoveryRequest.requesterSNssais != none & ( !(producer3.allowedsNssais[1] = none & producer3.allowedsNssais[2] = none) ) )->
                        (nfDiscoveryRequest.requesterSNssais in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                )
            )
        )
        /--if the service name is present in discovery req, all service level check will be performed
        algo:
        if (serviceName  is present), then
            for (each service),
                if nfDiscoveryRequest parameter presents
                    if a service level parameter is present and not none (TODO problematic as no way to differentiate present and not none)
                        try to perform service-level check
                    else if an nf parameter is present and not none
                        try to perform nf-level check if availble
        --/
        & ( (nfDiscoveryRequest.serviceName != none)-> 
            (
                (nfDiscoveryRequest.serviceName in {producer3.nfService1.serviceName, producer3.nfService2.serviceName})
                &
                -- for producer3.nfService1.serviceName ...
                (nfDiscoveryRequest.serviceName = producer3.nfService1.serviceName ->
                    (   
                        -- service must be valid
                        producer3.nfService1.isServiceInstanceValid
                        &
                        -- if service.allowedNFtypes present, perform check at service level
                        (( !(producer3.nfService1.allowedNFTypes[1] = none & producer3.nfService1.allowedNFTypes[2] = none) )-> (
                            --  only check service.allowedNFtypes regarless of the presence of producer3.allowedNFtypes
                                (nfDiscoveryRequest.requesterNFType in {producer3.nfService1.allowedNFTypes[1], producer3.nfService1.allowedNFTypes[2]})
                        ))
                        &
                        -- else: (i.e. if service.allowedNFtypes not present ) perform check at nf level
                        ((producer3.nfService1.allowedNFTypes[1] = none & producer3.nfService1.allowedNFTypes[2] = none) -> (
                            --  if nf.allowedNFtypes present
                            (( !(producer3.allowedNFTypes[1] = none & producer3.allowedNFTypes[2] = none) ) -> (
                                    -- perform nf level nfType check
                                    (nfDiscoveryRequest.requesterNFType in {producer3.allowedNFTypes[1], producer3.allowedNFTypes[2]})
                            )) -- else TRUE, but now check slices (no need to write code)
                        ))
                        &
                        -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                        (
                            (   -- if producer3.nfService1.sNssais not none, then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( !(producer3.nfService1.sNssais[1] = none & producer3.nfService1.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer3.nfService1.sNssais[1], producer3.nfService1.sNssais[2]}
                            )
                            & ( -- if producer3.nfService1.sNssais are none but producer3.sNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer3.nfService1.sNssais[1] = none & producer3.nfService1.sNssais[2] = none ) & ( !(producer3.sNssais[1] = none & producer3.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer3.sNssais[1], producer3.sNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                        -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                        & (
                            (   -- if producer3.nfService1.allowedsNssais not none, then check nf-level
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer3.nfService1.allowedsNssais[1] = none & producer3.nfService1.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer3.nfService1.allowedsNssais[1], producer3.nfService1.allowedsNssais[2]}
                            )
                            & ( -- if producer3.nfService1.allowedsNssais are none but producer3.allowedsNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer3.nfService1.allowedsNssais[1] = none & producer3.nfService1.allowedsNssais[2] = none ) & ( !(producer3.allowedsNssais[1] = none & producer3.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                    )
                ) 
                &
                -- for producer3.nfService2.serviceName ...
                (nfDiscoveryRequest.serviceName = producer3.nfService2.serviceName ->
                    (   
                        -- service must be valid
                        producer3.nfService2.isServiceInstanceValid
                        &
                        -- if service.allowedNFtypes present, perform check at service level
                        (( !(producer3.nfService2.allowedNFTypes[1] = none & producer3.nfService2.allowedNFTypes[2] = none) )-> (
                            --  only check service.allowedNFtypes regarless of the presence of producer3.allowedNFtypes
                                (nfDiscoveryRequest.requesterNFType in {producer3.nfService2.allowedNFTypes[1], producer3.nfService2.allowedNFTypes[2]})
                        ))
                        &
                        -- else: (i.e. if service.allowedNFtypes not present ) perform check at nf level
                        ((producer3.nfService2.allowedNFTypes[1] = none & producer3.nfService2.allowedNFTypes[2] = none) -> (
                            --  if nf.allowedNFtypes present
                            (( !(producer3.allowedNFTypes[1] = none & producer3.allowedNFTypes[2] = none) ) -> (
                                    -- perform nf level nfType check
                                    (nfDiscoveryRequest.requesterNFType in {producer3.allowedNFTypes[1], producer3.allowedNFTypes[2]})
                            )) -- else TRUE, but now check slices (no need to write code)
                        ))
                        &
                        -- if sNssais is present in both NFs and nfDiscoveryRequest, then check sNssais
                        (
                            (   -- if producer3.nfService2.sNssais not none, then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( !(producer3.nfService2.sNssais[1] = none & producer3.nfService2.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer3.nfService2.sNssais[1], producer3.nfService2.sNssais[2]}
                            )
                            & ( -- if producer3.nfService2.sNssais are none but producer3.sNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer3.nfService2.sNssais[1] = none & producer3.nfService2.sNssais[2] = none ) & ( !(producer3.sNssais[1] = none & producer3.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer3.sNssais[1], producer3.sNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                        -- if requesterSNssais is present in both NFs and nfDiscoveryRequest, then check requesterSNssais
                        & (
                            (   -- if producer3.nfService2.allowedsNssais not none, then check nf-level
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer3.nfService2.allowedsNssais[1] = none & producer3.nfService2.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer3.nfService2.allowedsNssais[1], producer3.nfService2.allowedsNssais[2]}
                            )
                            & ( -- if producer3.nfService2.allowedsNssais are none but producer3.allowedsNssais are not none,then check nf-level
                                (nfDiscoveryRequest.sNssais != none & ( producer3.nfService2.allowedsNssais[1] = none & producer3.nfService2.allowedsNssais[2] = none ) & ( !(producer3.allowedsNssais[1] = none & producer3.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]}
                            )
                            -- otherwise (if both service and nf level is none), True as a default
                        )
                    )
                ) 
            )  
        )
            : TRUE;
        TRUE: FALSE; -- isNFDiscovered{i};
    esac;


    --------------------- Validate Access Token Request-----------------
    -- check if any of the AT token authorized (synonymous to isServiceLevelATReqAuthorized)
    isAccessTokenReqAuthorized := case
        reqForSpecificProducer &  isServiceLevelATReqAuthorizedForSpecificProducer : TRUE;
        !reqForSpecificProducer &  (isServiceLevelATReqAuthorizedForProducer1 | isServiceLevelATReqAuthorizedForProducer2 | isServiceLevelATReqAuthorizedForProducer3 ) : TRUE;
        TRUE: FALSE;
    esac;
    isOpLevelATReqAuthorized := case
        reqForSpecificProducer &  isOpLevelATReqAuthorizedForSpecificProducer : TRUE;
        !reqForSpecificProducer &  (isOpLevelATReqAuthorizedForProducer1 | isOpLevelATReqAuthorizedForProducer2 | isOpLevelATReqAuthorizedForProducer3 ) : TRUE;
        TRUE: FALSE;
    esac;
   

    isServiceLevelATReqAuthorizedForSpecificProducer := case
        (
            reqForSpecificProducer
            & accessTokenRequest.isATReqValid
            & producer.isNFInstanceValid
            & consumer.isNFInstanceValid
            -- 0. modeling related extra check 
            & (accessTokenRequest.nfInstanceId != accessTokenRequest.targetNfInstanceId)
            
            -- 1. Access Token Request main argument check 
            
            & (accessTokenRequest.targetNfInstanceId = producer.nfInstanceId) -- mandatory for specific producer
            & (accessTokenRequest.scopeService in {producer.nfService1.serviceName, producer.nfService2.serviceName})
            & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId) -- how to implement?
            -- NF Profile cross-check
            -- if op level scope is present in the req, but not served by the producer, then FALSE
            
            /-- if operation level scope NOT present, then perform service level checks
            -- 1. perform check for service1 
            if req service matches with service1 name:
                -- i. perform service level allowedNFTypes check
                if service level allowedNFTypes present:
                    compare consumer type with service1.allowedNFtype
                    (proceed to slice check if TRUE)
                else: (i.e. service level allowedNFTypes NOT present)
                    -- perform nf level nfType check
                    if nf level allowedNFTypes present:
                        compare consumer.nfType with nf.allowedNFtype
                    else TRUE, but now check slices (no need to write code)
                
                -- ii. perform allowedsNssais check
                if service level allowedsNssais present:
                    if consumer.sNssais[1,2] present:
                        compare consumer.sNssais[1,2] with service.allowedsNssais
                    else: 
                        give access for the time being, TODO need discussion
                else: 
                    -- perform nf level nfType check
                    if nf level allowedsNssais present:
                        if consumer.sNssais[1,2] present:
                            compare consumer.sNssais[1,2] with nf.allowedsNssais
                        else: 
                            give access for the time being, TODO need discussion
                perform operation level checks
            -- 2. perform check for service2
            if req service matches with service2 name: 
                ....        
                do similar thing as above
                ...    
            --/
            &
            -- if Service scope  matches producer.nfService1.serviceName
            ((accessTokenRequest.scopeService = producer.nfService1.serviceName) -> (
                -- i. service must be registered
                (producer.nfService1.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer.nfService1.allowedNFTypes[1] = none & producer.nfService1.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer.allowedNFtypes
                        (consumer.nfType in {producer.nfService1.allowedNFTypes[1], producer.nfService1.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer.nfService1.allowedNFTypes[1] = none & producer.nfService1.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer.allowedNFTypes[1] = none & producer.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer.allowedNFTypes[1], producer.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer.nfService1.allowedsNssais[1] = none & producer.nfService1.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> ( -- TRUE
                            (consumer.sNssais[1] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                        ))
                        & -- TRUE
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                        ))
                        & -- TRUE
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                    
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer.nfService1.allowedsNssais[1] = none & producer.nfService1.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer.allowedsNssais[1] = none & producer.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
            &
            -- if Service scope  matches producer.nfService2.serviceName
            ((accessTokenRequest.scopeService = producer.nfService2.serviceName) -> (
                -- i. service must be registered
                (producer.nfService2.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer.nfService2.allowedNFTypes[1] = none & producer.nfService2.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer.allowedNFtypes
                        (consumer.nfType in {producer.nfService2.allowedNFTypes[1], producer.nfService2.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer.nfService2.allowedNFTypes[1] = none & producer.nfService2.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer.allowedNFTypes[1] = none & producer.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer.allowedNFTypes[1], producer.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer.nfService2.allowedsNssais[1] = none & producer.nfService2.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> ( -- TRUE
                            (consumer.sNssais[1] in {producer.nfService2.allowedsNssais[1], producer.nfService2.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer.nfService2.allowedsNssais[1], producer.nfService2.allowedsNssais[2]})
                        ))
                        & -- TRUE
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer.nfService2.allowedsNssais[1], producer.nfService2.allowedsNssais[2]})
                        ))
                        & -- TRUE
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer.nfService2.allowedsNssais[1], producer.nfService2.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                    
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer.nfService2.allowedsNssais[1] = none & producer.nfService2.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer.allowedsNssais[1] = none & producer.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
        )
            : TRUE;
        TRUE : FALSE;-- isServiceLevelATReqAuthorized; 
    esac;

    isServiceLevelATReqAuthorizedForProducer1 := case
        (
            !reqForSpecificProducer
            & accessTokenRequest.isATReqValid
            & producer1.isNFInstanceValid
            & consumer.isNFInstanceValid
            -- 0. modeling related extra check 
            & (accessTokenRequest.nfInstanceId != producer1.nfInstanceId)

            -- 1. Access Token Request main argument check 
            & (accessTokenRequest.targetNFType = producer1.nfType)
            & (accessTokenRequest.scopeService in {producer1.nfService1.serviceName, producer1.nfService2.serviceName})
            & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
            -- NF Profile cross-check

            &
            -- if Service scope  matches producer1.nfService1.serviceName
            ((accessTokenRequest.scopeService = producer1.nfService1.serviceName) -> (
                -- i. service must be registered
                (producer1.nfService1.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer1.allowedNFtypes
                        (consumer.nfType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
            &
            -- if Service scope  matches producer1.nfService2.serviceName
            ((accessTokenRequest.scopeService = producer1.nfService2.serviceName) -> (
                -- i. service must be registered
                (producer1.nfService2.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer1.nfService2.allowedNFTypes[1] = none & producer1.nfService2.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer1.allowedNFtypes
                        (consumer.nfType in {producer1.nfService2.allowedNFTypes[1], producer1.nfService2.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer1.nfService2.allowedNFTypes[1] = none & producer1.nfService2.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer1.nfService2.allowedsNssais[1] = none & producer1.nfService2.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer1.nfService2.allowedsNssais[1], producer1.nfService2.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer1.nfService2.allowedsNssais[1], producer1.nfService2.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer1.nfService2.allowedsNssais[1], producer1.nfService2.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer1.nfService2.allowedsNssais[1], producer1.nfService2.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer1.nfService2.allowedsNssais[1] = none & producer1.nfService2.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
        )
            : TRUE;
        TRUE : FALSE;-- isServiceLevelATReqAuthorized; 
    esac;

    isServiceLevelATReqAuthorizedForProducer2 := case
        (
            !reqForSpecificProducer
            & accessTokenRequest.isATReqValid
            & producer2.isNFInstanceValid
            & consumer.isNFInstanceValid
            -- 0. modeling related extra check 
            & (accessTokenRequest.nfInstanceId != producer2.nfInstanceId)

            -- 1. Access Token Request main argument check 
            & (accessTokenRequest.targetNFType = producer2.nfType)
            & (accessTokenRequest.scopeService in {producer2.nfService1.serviceName, producer2.nfService2.serviceName})
            & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
            -- NF Profile cross-check

            &
            -- if Service scope  matches producer2.nfService1.serviceName
            ((accessTokenRequest.scopeService = producer2.nfService1.serviceName) -> (
                -- i. service must be registered
                (producer2.nfService1.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer2.allowedNFtypes
                        (consumer.nfType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
            &
            -- if Service scope  matches producer2.nfService2.serviceName
            ((accessTokenRequest.scopeService = producer2.nfService2.serviceName) -> (
                -- i. service must be registered
                (producer2.nfService2.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer2.nfService2.allowedNFTypes[1] = none & producer2.nfService2.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer2.allowedNFtypes
                        (consumer.nfType in {producer2.nfService2.allowedNFTypes[1], producer2.nfService2.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer2.nfService2.allowedNFTypes[1] = none & producer2.nfService2.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer2.nfService2.allowedsNssais[1] = none & producer2.nfService2.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer2.nfService2.allowedsNssais[1], producer2.nfService2.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer2.nfService2.allowedsNssais[1], producer2.nfService2.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer2.nfService2.allowedsNssais[1], producer2.nfService2.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer2.nfService2.allowedsNssais[1], producer2.nfService2.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer2.nfService2.allowedsNssais[1] = none & producer2.nfService2.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
        )
            : TRUE;
        TRUE : FALSE;-- isServiceLevelATReqAuthorized; 
    esac;

    isServiceLevelATReqAuthorizedForProducer3 := case
        (
            !reqForSpecificProducer
            & accessTokenRequest.isATReqValid
            & producer3.isNFInstanceValid
            & consumer.isNFInstanceValid
            -- 0. modeling related extra check 
            & (accessTokenRequest.nfInstanceId != producer3.nfInstanceId)

            -- 1. Access Token Request main argument check 
            & (accessTokenRequest.targetNFType = producer3.nfType)
            & (accessTokenRequest.scopeService in {producer3.nfService1.serviceName, producer3.nfService2.serviceName})
            & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
            -- NF Profile cross-check

            &
            -- if Service scope  matches producer3.nfService1.serviceName
            ((accessTokenRequest.scopeService = producer3.nfService1.serviceName) -> (
                -- i. service must be registered
                (producer3.nfService1.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer3.nfService1.allowedNFTypes[1] = none & producer3.nfService1.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer3.allowedNFtypes
                        (consumer.nfType in {producer3.nfService1.allowedNFTypes[1], producer3.nfService1.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer3.nfService1.allowedNFTypes[1] = none & producer3.nfService1.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer3.allowedNFTypes[1] = none & producer3.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer3.allowedNFTypes[1], producer3.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer3.nfService1.allowedsNssais[1] = none & producer3.nfService1.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer3.nfService1.allowedsNssais[1], producer3.nfService1.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer3.nfService1.allowedsNssais[1], producer3.nfService1.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer3.nfService1.allowedsNssais[1], producer3.nfService1.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer3.nfService1.allowedsNssais[1], producer3.nfService1.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer3.nfService1.allowedsNssais[1] = none & producer3.nfService1.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer3.allowedsNssais[1] = none & producer3.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
            &
            -- if Service scope  matches producer3.nfService2.serviceName
            ((accessTokenRequest.scopeService = producer3.nfService2.serviceName) -> (
                -- i. service must be registered
                (producer3.nfService2.isServiceInstanceValid)
                &
                --ii. if service.allowedNFtypes present
                (( !(producer3.nfService2.allowedNFTypes[1] = none & producer3.nfService2.allowedNFTypes[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of producer3.allowedNFtypes
                        (consumer.nfType in {producer3.nfService2.allowedNFTypes[1], producer3.nfService2.allowedNFTypes[2]})
                ))
                &
                -- else: (i.e. if service.allowedNFtypes not present )
                ((producer3.nfService2.allowedNFTypes[1] = none & producer3.nfService2.allowedNFTypes[2] = none) -> (
                    --  if nf.allowedNFtypes present
                    (( !(producer3.allowedNFTypes[1] = none & producer3.allowedNFTypes[2] = none) ) -> (
                            -- perform nf level nfType check
                            (consumer.nfType in {producer3.allowedNFTypes[1], producer3.allowedNFTypes[2]})
                    )) -- else TRUE, but now check slices (no need to write code)
                ))
                & -- iii. if service.allowedsNssais present
                (( !(producer3.nfService2.allowedsNssais[1] = none & producer3.nfService2.allowedsNssais[2] = none) )-> (
                    --  only check service.allowedNFtypes regarless of the presence of nf.allowedsNssais
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer3.nfService2.allowedsNssais[1], producer3.nfService2.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer3.nfService2.allowedsNssais[1], producer3.nfService2.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer3.nfService2.allowedsNssais[1], producer3.nfService2.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer3.nfService2.allowedsNssais[1], producer3.nfService2.allowedsNssais[2]})
                        ))
                        -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none
                    )
                ))
                & -- else: (i.e. if service.allowedsNssais not present )
                ((producer3.nfService2.allowedsNssais[1] = none & producer3.nfService2.allowedsNssais[2] = none) -> (
                    --  nf.allowedsNssais present
                    (( !(producer3.allowedsNssais[1] = none & producer3.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer3.allowedsNssais[1], producer3.allowedsNssais[2]})
                            ))
                            -- trivially return true when both consumer.sNssais[1] & consumer.sNssais[2] are none i.e. consumer serves all slices
                        )
                    )) -- else : TRUE give access for the time being, TODO need discussion
                ))
                -- NOTE: op level checks have been removed 
            ))
        )
            : TRUE;
        TRUE : FALSE;-- isServiceLevelATReqAuthorized; 
    esac;

    isOpLevelATReqAuthorizedForSpecificProducer := case
    (
        reqForSpecificProducer
        & accessTokenRequest.isATReqValid
        & producer.isNFInstanceValid
        & consumer.isNFInstanceValid
        & (accessTokenRequest.nfInstanceId != accessTokenRequest.targetNfInstanceId)
            
        -- Access Token Request main argument check 
        
        & (accessTokenRequest.targetNfInstanceId = producer.nfInstanceId) -- mandatory for specific producer
        -- & (accessTokenRequest.scopeService in {producer.nfService1.serviceName, producer.nfService2.serviceName})
        & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId) -- how to implement?
        
        & accessTokenRequest.scopeOperation != none
        &
        -- must match one of the operation scopes
        (accessTokenRequest.scopeOperation in {producer.nfService1.operation1.opScope[2], producer.nfService1.operation2.opScope[2], producer.nfService2.operation1.opScope[2], producer.nfService2.operation2.opScope[2]})

        & -- if scopeOperation matches with serv1 op1 name
        ((accessTokenRequest.scopeOperation = producer.nfService1.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer.nfService1.operation1.allowedNFInstances[1] = none & producer.nfService1.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer.nfService1.operation1.allowedNFInstances[1], producer.nfService1.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer.nfService1.operation1.allowedNFTypes[1] = none & producer.nfService1.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer.nfService1.operation1.allowedNFTypes[1], producer.nfService1.operation1.allowedNFTypes[2]})
            )
        ))

        & -- if scopeOperation matches with serv1 op2 name
        ((accessTokenRequest.scopeOperation = producer.nfService1.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer.nfService1.operation2.allowedNFInstances[1] = none & producer.nfService1.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer.nfService1.operation2.allowedNFInstances[1], producer.nfService1.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer.nfService1.operation2.allowedNFTypes[1] = none & producer.nfService1.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer.nfService1.operation2.allowedNFTypes[1], producer.nfService1.operation2.allowedNFTypes[2]})
            )
        ))

        & -- if scopeOperation matches with serv2 op1 name
        ((accessTokenRequest.scopeOperation = producer.nfService2.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer.nfService2.operation1.allowedNFInstances[1] = none & producer.nfService2.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer.nfService2.operation1.allowedNFInstances[1], producer.nfService2.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer.nfService2.operation1.allowedNFTypes[1] = none & producer.nfService2.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer.nfService2.operation1.allowedNFTypes[1], producer.nfService2.operation1.allowedNFTypes[2]})
            )
        ))

        & -- if scopeOperation matches with serv2 op2 name
        ((accessTokenRequest.scopeOperation = producer.nfService2.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer.nfService2.operation2.allowedNFInstances[1] = none & producer.nfService2.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer.nfService2.operation2.allowedNFInstances[1], producer.nfService2.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer.nfService2.operation2.allowedNFTypes[1] = none & producer.nfService2.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer.nfService2.operation2.allowedNFTypes[1], producer.nfService2.operation2.allowedNFTypes[2]})
            )
        ))
 
    )
        : TRUE;
    TRUE : FALSE;-- isOpLevelATReqAuthorized;
    esac;

    
    isOpLevelATReqAuthorizedForProducer1 := case
    (
        !reqForSpecificProducer
        & accessTokenRequest.isATReqValid
        & producer1.isNFInstanceValid
        & consumer.isNFInstanceValid
        & (accessTokenRequest.nfInstanceId != producer1.nfInstanceId)
            
        -- Access Token Request main argument check 
        & (accessTokenRequest.targetNFType = producer1.nfType)
        & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
        
        & accessTokenRequest.scopeOperation != none
        &
        -- must match one of the operation scopes
        (accessTokenRequest.scopeOperation in {producer1.nfService1.operation1.opScope[2], producer1.nfService1.operation2.opScope[2], producer1.nfService2.operation1.opScope[2], producer1.nfService2.operation2.opScope[2]})

        & -- if scopeOperation matches with service1 op1 name
        ((accessTokenRequest.scopeOperation = producer1.nfService1.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer1.nfService1.operation1.allowedNFInstances[1] = none & producer1.nfService1.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer1.nfService1.operation1.allowedNFInstances[1], producer1.nfService1.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer1.nfService1.operation1.allowedNFTypes[1] = none & producer1.nfService1.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer1.nfService1.operation1.allowedNFTypes[1], producer1.nfService1.operation1.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service1 op2 name
        ((accessTokenRequest.scopeOperation = producer1.nfService1.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer1.nfService1.operation2.allowedNFInstances[1] = none & producer1.nfService1.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer1.nfService1.operation2.allowedNFInstances[1], producer1.nfService1.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer1.nfService1.operation2.allowedNFTypes[1] = none & producer1.nfService1.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer1.nfService1.operation2.allowedNFTypes[1], producer1.nfService1.operation2.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service2 op1 name
        ((accessTokenRequest.scopeOperation = producer1.nfService2.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer1.nfService2.operation1.allowedNFInstances[1] = none & producer1.nfService2.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer1.nfService2.operation1.allowedNFInstances[1], producer1.nfService2.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer1.nfService2.operation1.allowedNFTypes[1] = none & producer1.nfService2.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer1.nfService2.operation1.allowedNFTypes[1], producer1.nfService2.operation1.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service2 op2 name
        ((accessTokenRequest.scopeOperation = producer1.nfService2.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer1.nfService2.operation2.allowedNFInstances[1] = none & producer1.nfService2.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer1.nfService2.operation2.allowedNFInstances[1], producer1.nfService2.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer1.nfService2.operation2.allowedNFTypes[1] = none & producer1.nfService2.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer1.nfService2.operation2.allowedNFTypes[1], producer1.nfService2.operation2.allowedNFTypes[2]})
            )
        ))     
    )
        : TRUE;
    TRUE : FALSE;-- isOpLevelATReqAuthorized;
    esac;

    
    
    isOpLevelATReqAuthorizedForProducer2 := case
    (
        !reqForSpecificProducer
        & accessTokenRequest.isATReqValid
        & producer2.isNFInstanceValid
        & consumer.isNFInstanceValid
        & (accessTokenRequest.nfInstanceId != producer2.nfInstanceId)
            
        -- Access Token Request main argument check 
        & (accessTokenRequest.targetNFType = producer2.nfType)
        & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
        
        & accessTokenRequest.scopeOperation != none
        &
        -- must match one of the operation scopes
        (accessTokenRequest.scopeOperation in {producer2.nfService1.operation1.opScope[2], producer2.nfService1.operation2.opScope[2], producer2.nfService2.operation1.opScope[2], producer2.nfService2.operation2.opScope[2]})

        & -- if scopeOperation matches with service1 op1 name
        ((accessTokenRequest.scopeOperation = producer2.nfService1.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer2.nfService1.operation1.allowedNFInstances[1] = none & producer2.nfService1.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer2.nfService1.operation1.allowedNFInstances[1], producer2.nfService1.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer2.nfService1.operation1.allowedNFTypes[1] = none & producer2.nfService1.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer2.nfService1.operation1.allowedNFTypes[1], producer2.nfService1.operation1.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service1 op2 name
        ((accessTokenRequest.scopeOperation = producer2.nfService1.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer2.nfService1.operation2.allowedNFInstances[1] = none & producer2.nfService1.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer2.nfService1.operation2.allowedNFInstances[1], producer2.nfService1.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer2.nfService1.operation2.allowedNFTypes[1] = none & producer2.nfService1.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer2.nfService1.operation2.allowedNFTypes[1], producer2.nfService1.operation2.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service2 op1 name
        ((accessTokenRequest.scopeOperation = producer2.nfService2.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer2.nfService2.operation1.allowedNFInstances[1] = none & producer2.nfService2.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer2.nfService2.operation1.allowedNFInstances[1], producer2.nfService2.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer2.nfService2.operation1.allowedNFTypes[1] = none & producer2.nfService2.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer2.nfService2.operation1.allowedNFTypes[1], producer2.nfService2.operation1.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service2 op2 name
        ((accessTokenRequest.scopeOperation = producer2.nfService2.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer2.nfService2.operation2.allowedNFInstances[1] = none & producer2.nfService2.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer2.nfService2.operation2.allowedNFInstances[1], producer2.nfService2.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer2.nfService2.operation2.allowedNFTypes[1] = none & producer2.nfService2.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer2.nfService2.operation2.allowedNFTypes[1], producer2.nfService2.operation2.allowedNFTypes[2]})
            )
        ))     
    )
        : TRUE;
    TRUE : FALSE;-- isOpLevelATReqAuthorized;
    esac;

    
    
    isOpLevelATReqAuthorizedForProducer3 := case
    (
        !reqForSpecificProducer
        & accessTokenRequest.isATReqValid
        & producer3.isNFInstanceValid
        & consumer.isNFInstanceValid
        & (accessTokenRequest.nfInstanceId != producer3.nfInstanceId)
            
        -- Access Token Request main argument check 
        & (accessTokenRequest.targetNFType = producer3.nfType)
        & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
        
        & accessTokenRequest.scopeOperation != none
        &
        -- must match one of the operation scopes
        (accessTokenRequest.scopeOperation in {producer3.nfService1.operation1.opScope[2], producer3.nfService1.operation2.opScope[2], producer3.nfService2.operation1.opScope[2], producer3.nfService2.operation2.opScope[2]})

        & -- if scopeOperation matches with service1 op1 name
        ((accessTokenRequest.scopeOperation = producer3.nfService1.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer3.nfService1.operation1.allowedNFInstances[1] = none & producer3.nfService1.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer3.nfService1.operation1.allowedNFInstances[1], producer3.nfService1.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer3.nfService1.operation1.allowedNFTypes[1] = none & producer3.nfService1.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer3.nfService1.operation1.allowedNFTypes[1], producer3.nfService1.operation1.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service1 op2 name
        ((accessTokenRequest.scopeOperation = producer3.nfService1.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer3.nfService1.operation2.allowedNFInstances[1] = none & producer3.nfService1.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer3.nfService1.operation2.allowedNFInstances[1], producer3.nfService1.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer3.nfService1.operation2.allowedNFTypes[1] = none & producer3.nfService1.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer3.nfService1.operation2.allowedNFTypes[1], producer3.nfService1.operation2.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service2 op1 name
        ((accessTokenRequest.scopeOperation = producer3.nfService2.operation1.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation1.allowedNFInstances
                (!( producer3.nfService2.operation1.allowedNFInstances[1] = none & producer3.nfService2.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer3.nfService2.operation1.allowedNFInstances[1], producer3.nfService2.operation1.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation1.allowedNFTypes
                (!(producer3.nfService2.operation1.allowedNFTypes[1] = none & producer3.nfService2.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer3.nfService2.operation1.allowedNFTypes[1], producer3.nfService2.operation1.allowedNFTypes[2]})
            )
        ))
        & -- if scopeOperation matches with service2 op2 name
        ((accessTokenRequest.scopeOperation = producer3.nfService2.operation2.opScope[2]) -> (
            --- perform allowedNFInstances & allowedNFTypes check
            -- one of the following must be true
            (
                -- matches with operation2.allowedNFInstances
                (!( producer3.nfService2.operation2.allowedNFInstances[1] = none & producer3.nfService2.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer3.nfService2.operation2.allowedNFInstances[1], producer3.nfService2.operation2.allowedNFInstances[2]})
            )
            | -- OR
            (
                -- matches with operation2.allowedNFTypes
                (!(producer3.nfService2.operation2.allowedNFTypes[1] = none & producer3.nfService2.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer3.nfService2.operation2.allowedNFTypes[1], producer3.nfService2.operation2.allowedNFTypes[2]})
            )
        ))     
    )
        : TRUE;
    TRUE : FALSE;-- isOpLevelATReqAuthorized;
    esac;

    
    isServiceReqGranted := 
    case
        consumer.isNFInstanceValid
        & producer.isNFInstanceValid
        & accessToken.isTokenValid
        & serviceRequest.isServiceRequestValid

        & serviceRequest.subjectID = accessToken.sub
        & serviceRequest.subjectID = consumer.nfInstanceId -- TODO probably CCA_subjectl for authentication check
        & serviceRequest.audienceID = producer.nfInstanceId
        & ((reqForSpecificProducer) -> (accessToken.aud_NFInstanceId = producer.nfInstanceId)) -- checked by the producer
        & ((!reqForSpecificProducer) -> (accessToken.aud_NFType = producer.nfType)) -- checked by the producer
        & serviceRequest.service = accessToken.scopeService -- checked by the producer
        & (
            (producer.nfService1.isServiceInstanceValid & serviceRequest.service = producer.nfService1.serviceName) |
            (producer.nfService2.isServiceInstanceValid & serviceRequest.service = producer.nfService2.serviceName))
        & serviceRequest.operation in {producer.nfService1.operation1.opName, producer.nfService1.operation2.opName, producer.nfService2.operation1.opName, producer.nfService2.operation2.opName}
        & ( 
            -- check service level scope
            (serviceRequest.operation = producer.nfService1.operation1.opName) -> (
                serviceRequest.service = producer.nfService1.serviceName
                &
                ((producer.nfService1.operation1.opScope[1] != none) -> (
                    serviceRequest.service = producer.nfService1.operation1.opScope[1]
                ))
                &
                ((producer.nfService1.operation1.opScope[1] = none) -> (
                    serviceRequest.service = producer.nfService1.serviceName
                ))
                & -- if op level accessToken is not defined, then check additional scope
                ((producer.nfService1.operation1.opScope[2] != none) -> (
                    accessToken.scopeOperation = producer.nfService1.operation1.opScope[2]
                )) -- if op level accessToken is not defined for this operation then, trivially true 
            )
        )
        & ( 
            -- check service level scope
            (serviceRequest.operation = producer.nfService1.operation2.opName) -> (
                serviceRequest.service = producer.nfService1.serviceName
                &
                ((producer.nfService1.operation2.opScope[1] != none) -> (
                    serviceRequest.service = producer.nfService1.operation2.opScope[1]
                ))
                &
                ((producer.nfService1.operation2.opScope[1] = none) -> (
                    serviceRequest.service = producer.nfService1.serviceName
                ))
                & -- if op level accessToken is not defined, then check additional scope
                ((producer.nfService1.operation2.opScope[2] != none) -> (
                    accessToken.scopeOperation = producer.nfService1.operation2.opScope[2]
                )) -- if op level accessToken is not defined for this operation then, trivially true 
            )
        )
        & ( 
            -- check service level scope
            (serviceRequest.operation = producer.nfService2.operation1.opName) -> (
                serviceRequest.service = producer.nfService2.serviceName
                &
                ((producer.nfService2.operation1.opScope[1] != none) -> (
                    serviceRequest.service = producer.nfService2.operation1.opScope[1]
                ))
                &
                ((producer.nfService2.operation1.opScope[1] = none) -> (
                    serviceRequest.service = producer.nfService2.serviceName
                ))
                & -- if op level accessToken is not defined, then check additional scope
                ((producer.nfService2.operation1.opScope[2] != none) -> (
                    accessToken.scopeOperation = producer.nfService2.operation1.opScope[2]
                )) -- if op level accessToken is not defined for this operation then, trivially true 
            )
        )
        & ( 
            -- check service level scope
            (serviceRequest.operation = producer.nfService2.operation2.opName) -> (
                serviceRequest.service = producer.nfService2.serviceName
                &
                ((producer.nfService2.operation2.opScope[1] != none) -> (
                    serviceRequest.service = producer.nfService2.operation2.opScope[1]
                ))
                &
                ((producer.nfService2.operation2.opScope[1] = none) -> (
                    serviceRequest.service = producer.nfService2.serviceName
                ))
                & -- if op level accessToken is not defined, then check additional scope
                ((producer.nfService2.operation2.opScope[2] != none) -> (
                    accessToken.scopeOperation = producer.nfService2.operation2.opScope[2]
                )) -- if op level accessToken is not defined for this operation then, trivially true 
            )
        )
        & ((serviceRequest.sNssais != none) ->(
                serviceRequest.sNssais in {producer.sNssais[1], producer.sNssais[2]}
            )
        )
            : TRUE;
        TRUE: FALSE; -- isServiceReqGranted;
    esac;
    
	
    isOperationParametersAuthorized:=
    case
        serviceRequest.operation = producer.nfService1.operation1.opName & producer.nfService1.operation1.isParamVerified : TRUE;
        serviceRequest.operation = producer.nfService1.operation2.opName & producer.nfService1.operation2.isParamVerified : TRUE;
        serviceRequest.operation = producer.nfService2.operation1.opName & producer.nfService2.operation1.isParamVerified : TRUE;
        serviceRequest.operation = producer.nfService2.operation2.opName & producer.nfService2.operation2.isParamVerified : TRUE;
        TRUE: FALSE;
    esac;

ASSIGN
    -- state variables
    init(initConsumer) := FALSE;
    next(initConsumer) := consumer.model_id = 0 ? TRUE: initConsumer;
    init(initProducer) := FALSE;
    next(initProducer) := (producer.model_id = 0 & (isNFDiscovered1 | isNFDiscovered2 | isNFDiscovered3)) ? TRUE: initProducer;
    
    init(initDiscoveryRequest) := FALSE;
    next(initDiscoveryRequest) := case
        -- (!initDiscoveryRequest & initConsumer) ? TRUE : initDiscoveryRequest;
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : TRUE;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : TRUE;
        TRUE: initDiscoveryRequest;
    esac;
    
    init(initATRequest) := FALSE;
    next(initATRequest) := case
        -- (!initATRequest & initConsumer & initProducer)? TRUE : initATRequest;
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest): TRUE;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : TRUE;
        TRUE : initATRequest;
    esac;
    
    init(initServiceRequest) := FALSE;
    next(initServiceRequest) := (!initServiceRequest & initConsumer & initProducer & accessToken.isTokenValid) ? TRUE : initServiceRequest;
    ---------- consumer selection : any of consumer1 and consumer2
    init(consumer.model_id) := 0;
    init(consumer.CCA_subject) := none;
    init(consumer.nfInstanceId) := none;
    init(consumer.nfType) := none;
    init(consumer.nfStatus) := none;
    init(consumer.sNssais[1]) := none;
    init(consumer.sNssais[2]) := none;
    init(consumer.allowedNFTypes[1]) := none;
    init(consumer.allowedNFTypes[2]) := none;
    init(consumer.allowedsNssais[1]) := none;
    init(consumer.allowedsNssais[2]) := none;
    init(consumer.load) := 0;
    init(consumer.capacity) := 0;
    init(consumer.priority) := 0;
    init(consumer.nfService1.allowedNFTypes[1]) := none;
    init(consumer.nfService1.allowedNFTypes[2]) := none;
    init(consumer.nfService1.load) := 0;
    init(consumer.nfService1.capacity) := 0;
    init(consumer.nfService1.oauth2Required) := FALSE;
    init(consumer.nfService1.priority) := 0;
    init(consumer.nfService1.serviceInstanceId) := none;
    init(consumer.nfService1.serviceName) := none;
    init(consumer.nfService1.serviceStatus) := none;
    init(consumer.nfService1.sNssais[1]) := none;
    init(consumer.nfService1.sNssais[2]) := none;
    init(consumer.nfService1.allowedsNssais[1]) := none;
    init(consumer.nfService1.allowedsNssais[2]) := none;
    init(consumer.nfService1.operation1.allowedNFInstances[1]) := none;
    init(consumer.nfService1.operation1.allowedNFInstances[2]) := none;
    init(consumer.nfService1.operation1.allowedNFTypes[1]) := none;
    init(consumer.nfService1.operation1.allowedNFTypes[2]) := none;
    init(consumer.nfService1.operation1.opName) := none;
    init(consumer.nfService1.operation1.opScope[1]) := none;
    init(consumer.nfService1.operation1.opScope[2]) := none;
    init(consumer.nfService1.operation1.param1.isSensitive) := FALSE;
    init(consumer.nfService1.operation1.param1.name) := none;
    init(consumer.nfService1.operation1.param1.value) := 0;
    init(consumer.nfService1.operation1.param2.isSensitive) := FALSE;
    init(consumer.nfService1.operation1.param2.name) := none;
    init(consumer.nfService1.operation1.param2.value) := 0;
    init(consumer.nfService1.operation2.allowedNFInstances[1]) := none;
    init(consumer.nfService1.operation2.allowedNFInstances[2]) := none;
    init(consumer.nfService1.operation2.allowedNFTypes[1]) := none;
    init(consumer.nfService1.operation2.allowedNFTypes[2]) := none;
    init(consumer.nfService1.operation2.opName) := none;
    init(consumer.nfService1.operation2.opScope[1]) := none;
    init(consumer.nfService1.operation2.opScope[2]) := none;
    init(consumer.nfService1.operation2.param1.isSensitive) := FALSE;
    init(consumer.nfService1.operation2.param1.name) := none;
    init(consumer.nfService1.operation2.param1.value) := 0;
    init(consumer.nfService1.operation2.param2.isSensitive) := FALSE;
    init(consumer.nfService1.operation2.param2.name) := none;
    init(consumer.nfService1.operation2.param2.value) := 0;
    init(consumer.nfService2.allowedNFTypes[1]) := none;
    init(consumer.nfService2.allowedNFTypes[2]) := none;
    init(consumer.nfService2.load) := 0;
    init(consumer.nfService2.capacity) := 0;
    init(consumer.nfService2.oauth2Required) := FALSE;
    init(consumer.nfService2.priority) := 0;
    init(consumer.nfService2.serviceInstanceId) := none;
    init(consumer.nfService2.serviceName) := none;
    init(consumer.nfService2.serviceStatus) := none;
    init(consumer.nfService2.sNssais[1]) := none;
    init(consumer.nfService2.sNssais[2]) := none;
    init(consumer.nfService2.allowedsNssais[1]) := none;
    init(consumer.nfService2.allowedsNssais[2]) := none;
    init(consumer.nfService2.operation1.allowedNFInstances[1]) := none;
    init(consumer.nfService2.operation1.allowedNFInstances[2]) := none;
    init(consumer.nfService2.operation1.allowedNFTypes[1]) := none;
    init(consumer.nfService2.operation1.allowedNFTypes[2]) := none;
    init(consumer.nfService2.operation1.opName) := none;
    init(consumer.nfService2.operation1.opScope[1]) := none;
    init(consumer.nfService2.operation1.opScope[2]) := none;
    init(consumer.nfService2.operation1.param1.isSensitive) := FALSE;
    init(consumer.nfService2.operation1.param1.name) := none;
    init(consumer.nfService2.operation1.param1.value) := 0;
    init(consumer.nfService2.operation1.param2.isSensitive) := FALSE;
    init(consumer.nfService2.operation1.param2.name) := none;
    init(consumer.nfService2.operation1.param2.value) := 0;
    init(consumer.nfService2.operation2.allowedNFInstances[1]) := none;
    init(consumer.nfService2.operation2.allowedNFInstances[2]) := none;
    init(consumer.nfService2.operation2.allowedNFTypes[1]) := none;
    init(consumer.nfService2.operation2.allowedNFTypes[2]) := none;
    init(consumer.nfService2.operation2.opName) := none;
    init(consumer.nfService2.operation2.opScope[1]) := none;
    init(consumer.nfService2.operation2.opScope[2]) := none;
    init(consumer.nfService2.operation2.param1.isSensitive) := FALSE;
    init(consumer.nfService2.operation2.param1.name) := none;
    init(consumer.nfService2.operation2.param1.value) := 0;
    init(consumer.nfService2.operation2.param2.isSensitive) := FALSE;
    init(consumer.nfService2.operation2.param2.name) := none;
    init(consumer.nfService2.operation2.param2.value) := 0;

    ---------- consumer NF update
    next(consumer.model_id) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.model_id;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.model_id;
        (consumer.model_id = consumer1.model_id) : consumer1.model_id;
        (consumer.model_id = consumer2.model_id) : consumer2.model_id;
        TRUE : consumer.model_id;
    esac;
    next(consumer.CCA_subject) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.CCA_subject;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.CCA_subject;
        (consumer.model_id = consumer1.model_id) : consumer1.CCA_subject;
        (consumer.model_id = consumer2.model_id) : consumer2.CCA_subject;
        TRUE : consumer.CCA_subject;
    esac;
    next(consumer.nfInstanceId) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfInstanceId;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfInstanceId;
        (consumer.model_id = consumer1.model_id) : consumer1.nfInstanceId;
        (consumer.model_id = consumer2.model_id) : consumer2.nfInstanceId;
        TRUE : consumer.nfInstanceId;
    esac;
    next(consumer.nfType) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfType;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfType;
        (consumer.model_id = consumer1.model_id) : consumer1.nfType;
        (consumer.model_id = consumer2.model_id) : consumer2.nfType;
        TRUE : consumer.nfType;
    esac;
    next(consumer.nfStatus) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfStatus;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfStatus;
        (consumer.model_id = consumer1.model_id) : consumer1.nfStatus;
        (consumer.model_id = consumer2.model_id) : consumer2.nfStatus;
        TRUE : consumer.nfStatus;
    esac;
    next(consumer.sNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.sNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.sNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.sNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.sNssais[1];
        TRUE : consumer.sNssais[1];
    esac;
    next(consumer.sNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.sNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.sNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.sNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.sNssais[2];
        TRUE : consumer.sNssais[2];
    esac;
    next(consumer.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedNFTypes[1];
        TRUE : consumer.allowedNFTypes[1];
    esac;
    next(consumer.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedNFTypes[2];
        TRUE : consumer.allowedNFTypes[2];
    esac;
    next(consumer.allowedsNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedsNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedsNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedsNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedsNssais[1];
        TRUE : consumer.allowedsNssais[1];
    esac;
    next(consumer.allowedsNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedsNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedsNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedsNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedsNssais[2];
        TRUE : consumer.allowedsNssais[2];
    esac;
    next(consumer.load) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.load;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.load;
        (consumer.model_id = consumer1.model_id) : consumer1.load;
        (consumer.model_id = consumer2.model_id) : consumer2.load;
        TRUE : consumer.load;
    esac;
    next(consumer.capacity) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.capacity;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.capacity;
        (consumer.model_id = consumer1.model_id) : consumer1.capacity;
        (consumer.model_id = consumer2.model_id) : consumer2.capacity;
        TRUE : consumer.capacity;
    esac;
    next(consumer.priority) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.priority;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.priority;
        (consumer.model_id = consumer1.model_id) : consumer1.priority;
        (consumer.model_id = consumer2.model_id) : consumer2.priority;
        TRUE : consumer.priority;
    esac;
    next(consumer.nfService1.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedNFTypes[1];
        TRUE : consumer.nfService1.allowedNFTypes[1];
    esac;
    next(consumer.nfService1.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedNFTypes[2];
        TRUE : consumer.nfService1.allowedNFTypes[2];
    esac;
    next(consumer.nfService1.load) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.load;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.load;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.load;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.load;
        TRUE : consumer.nfService1.load;
    esac;
    next(consumer.nfService1.capacity) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.capacity;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.capacity;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.capacity;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.capacity;
        TRUE : consumer.nfService1.capacity;
    esac;
    next(consumer.nfService1.oauth2Required) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.oauth2Required;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.oauth2Required;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.oauth2Required;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.oauth2Required;
        TRUE : consumer.nfService1.oauth2Required;
    esac;
    next(consumer.nfService1.priority) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.priority;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.priority;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.priority;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.priority;
        TRUE : consumer.nfService1.priority;
    esac;
    next(consumer.nfService1.serviceInstanceId) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.serviceInstanceId;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.serviceInstanceId;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.serviceInstanceId;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.serviceInstanceId;
        TRUE : consumer.nfService1.serviceInstanceId;
    esac;
    next(consumer.nfService1.serviceName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.serviceName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.serviceName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.serviceName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.serviceName;
        TRUE : consumer.nfService1.serviceName;
    esac;
    next(consumer.nfService1.serviceStatus) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.serviceStatus;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.serviceStatus;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.serviceStatus;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.serviceStatus;
        TRUE : consumer.nfService1.serviceStatus;
    esac;
    next(consumer.nfService1.sNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.sNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.sNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.sNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.sNssais[1];
        TRUE : consumer.nfService1.sNssais[1];
    esac;
    next(consumer.nfService1.sNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.sNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.sNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.sNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.sNssais[2];
        TRUE : consumer.nfService1.sNssais[2];
    esac;
    next(consumer.nfService1.allowedsNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedsNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedsNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedsNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedsNssais[1];
        TRUE : consumer.nfService1.allowedsNssais[1];
    esac;
    next(consumer.nfService1.allowedsNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedsNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedsNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedsNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedsNssais[2];
        TRUE : consumer.nfService1.allowedsNssais[2];
    esac;
    next(consumer.nfService1.operation1.allowedNFInstances[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFInstances[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFInstances[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFInstances[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFInstances[1];
        TRUE : consumer.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(consumer.nfService1.operation1.allowedNFInstances[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFInstances[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFInstances[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFInstances[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFInstances[2];
        TRUE : consumer.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(consumer.nfService1.operation1.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFTypes[1];
        TRUE : consumer.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(consumer.nfService1.operation1.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFTypes[2];
        TRUE : consumer.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(consumer.nfService1.operation1.opName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opName;
        TRUE : consumer.nfService1.operation1.opName;
    esac;
    next(consumer.nfService1.operation1.opScope[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opScope[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opScope[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opScope[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opScope[1];
        TRUE : consumer.nfService1.operation1.opScope[1];
    esac;
    next(consumer.nfService1.operation1.opScope[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opScope[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opScope[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opScope[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opScope[2];
        TRUE : consumer.nfService1.operation1.opScope[2];
    esac;
    next(consumer.nfService1.operation1.param1.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.isSensitive;
        TRUE : consumer.nfService1.operation1.param1.isSensitive;
    esac;
    next(consumer.nfService1.operation1.param1.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.name;
        TRUE : consumer.nfService1.operation1.param1.name;
    esac;
    next(consumer.nfService1.operation1.param1.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.value;
        TRUE : consumer.nfService1.operation1.param1.value;
    esac;
    next(consumer.nfService1.operation1.param2.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param2.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param2.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param2.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param2.isSensitive;
        TRUE : consumer.nfService1.operation1.param2.isSensitive;
    esac;
    next(consumer.nfService1.operation1.param2.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param2.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param2.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param2.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param2.name;
        TRUE : consumer.nfService1.operation1.param2.name;
    esac;
    next(consumer.nfService1.operation1.param2.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param2.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param2.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param2.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param2.value;
        TRUE : consumer.nfService1.operation1.param2.value;
    esac;
    next(consumer.nfService1.operation2.allowedNFInstances[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFInstances[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFInstances[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFInstances[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFInstances[1];
        TRUE : consumer.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(consumer.nfService1.operation2.allowedNFInstances[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFInstances[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFInstances[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFInstances[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFInstances[2];
        TRUE : consumer.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(consumer.nfService1.operation2.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFTypes[1];
        TRUE : consumer.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(consumer.nfService1.operation2.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFTypes[2];
        TRUE : consumer.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(consumer.nfService1.operation2.opName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.opName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.opName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.opName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.opName;
        TRUE : consumer.nfService1.operation2.opName;
    esac;
    next(consumer.nfService1.operation2.opScope[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.opScope[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.opScope[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.opScope[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.opScope[1];
        TRUE : consumer.nfService1.operation2.opScope[1];
    esac;
    next(consumer.nfService1.operation2.opScope[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.opScope[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.opScope[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.opScope[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.opScope[2];
        TRUE : consumer.nfService1.operation2.opScope[2];
    esac;
    next(consumer.nfService1.operation2.param1.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param1.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param1.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param1.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param1.isSensitive;
        TRUE : consumer.nfService1.operation2.param1.isSensitive;
    esac;
    next(consumer.nfService1.operation2.param1.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param1.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param1.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param1.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param1.name;
        TRUE : consumer.nfService1.operation2.param1.name;
    esac;
    next(consumer.nfService1.operation2.param1.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param1.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param1.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param1.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param1.value;
        TRUE : consumer.nfService1.operation2.param1.value;
    esac;
    next(consumer.nfService1.operation2.param2.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param2.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param2.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param2.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param2.isSensitive;
        TRUE : consumer.nfService1.operation2.param2.isSensitive;
    esac;
    next(consumer.nfService1.operation2.param2.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param2.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param2.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param2.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param2.name;
        TRUE : consumer.nfService1.operation2.param2.name;
    esac;
    next(consumer.nfService1.operation2.param2.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param2.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param2.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param2.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param2.value;
        TRUE : consumer.nfService1.operation2.param2.value;
    esac;
    next(consumer.nfService2.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.allowedNFTypes[1];
        TRUE : consumer.nfService2.allowedNFTypes[1];
    esac;
    next(consumer.nfService2.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.allowedNFTypes[2];
        TRUE : consumer.nfService2.allowedNFTypes[2];
    esac;
    next(consumer.nfService2.load) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.load;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.load;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.load;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.load;
        TRUE : consumer.nfService2.load;
    esac;
    next(consumer.nfService2.capacity) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.capacity;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.capacity;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.capacity;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.capacity;
        TRUE : consumer.nfService2.capacity;
    esac;
    next(consumer.nfService2.oauth2Required) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.oauth2Required;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.oauth2Required;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.oauth2Required;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.oauth2Required;
        TRUE : consumer.nfService2.oauth2Required;
    esac;
    next(consumer.nfService2.priority) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.priority;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.priority;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.priority;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.priority;
        TRUE : consumer.nfService2.priority;
    esac;
    next(consumer.nfService2.serviceInstanceId) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.serviceInstanceId;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.serviceInstanceId;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.serviceInstanceId;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.serviceInstanceId;
        TRUE : consumer.nfService2.serviceInstanceId;
    esac;
    next(consumer.nfService2.serviceName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.serviceName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.serviceName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.serviceName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.serviceName;
        TRUE : consumer.nfService2.serviceName;
    esac;
    next(consumer.nfService2.serviceStatus) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.serviceStatus;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.serviceStatus;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.serviceStatus;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.serviceStatus;
        TRUE : consumer.nfService2.serviceStatus;
    esac;
    next(consumer.nfService2.sNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.sNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.sNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.sNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.sNssais[1];
        TRUE : consumer.nfService2.sNssais[1];
    esac;
    next(consumer.nfService2.sNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.sNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.sNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.sNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.sNssais[2];
        TRUE : consumer.nfService2.sNssais[2];
    esac;
    next(consumer.nfService2.allowedsNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.allowedsNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.allowedsNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.allowedsNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.allowedsNssais[1];
        TRUE : consumer.nfService2.allowedsNssais[1];
    esac;
    next(consumer.nfService2.allowedsNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.allowedsNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.allowedsNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.allowedsNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.allowedsNssais[2];
        TRUE : consumer.nfService2.allowedsNssais[2];
    esac;
    next(consumer.nfService2.operation1.allowedNFInstances[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.allowedNFInstances[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.allowedNFInstances[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.allowedNFInstances[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.allowedNFInstances[1];
        TRUE : consumer.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(consumer.nfService2.operation1.allowedNFInstances[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.allowedNFInstances[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.allowedNFInstances[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.allowedNFInstances[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.allowedNFInstances[2];
        TRUE : consumer.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(consumer.nfService2.operation1.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.allowedNFTypes[1];
        TRUE : consumer.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(consumer.nfService2.operation1.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.allowedNFTypes[2];
        TRUE : consumer.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(consumer.nfService2.operation1.opName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.opName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.opName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.opName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.opName;
        TRUE : consumer.nfService2.operation1.opName;
    esac;
    next(consumer.nfService2.operation1.opScope[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.opScope[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.opScope[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.opScope[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.opScope[1];
        TRUE : consumer.nfService2.operation1.opScope[1];
    esac;
    next(consumer.nfService2.operation1.opScope[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.opScope[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.opScope[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.opScope[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.opScope[2];
        TRUE : consumer.nfService2.operation1.opScope[2];
    esac;
    next(consumer.nfService2.operation1.param1.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.param1.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.param1.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.param1.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.param1.isSensitive;
        TRUE : consumer.nfService2.operation1.param1.isSensitive;
    esac;
    next(consumer.nfService2.operation1.param1.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.param1.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.param1.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.param1.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.param1.name;
        TRUE : consumer.nfService2.operation1.param1.name;
    esac;
    next(consumer.nfService2.operation1.param1.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.param1.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.param1.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.param1.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.param1.value;
        TRUE : consumer.nfService2.operation1.param1.value;
    esac;
    next(consumer.nfService2.operation1.param2.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.param2.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.param2.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.param2.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.param2.isSensitive;
        TRUE : consumer.nfService2.operation1.param2.isSensitive;
    esac;
    next(consumer.nfService2.operation1.param2.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.param2.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.param2.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.param2.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.param2.name;
        TRUE : consumer.nfService2.operation1.param2.name;
    esac;
    next(consumer.nfService2.operation1.param2.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation1.param2.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation1.param2.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation1.param2.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation1.param2.value;
        TRUE : consumer.nfService2.operation1.param2.value;
    esac;
    next(consumer.nfService2.operation2.allowedNFInstances[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.allowedNFInstances[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.allowedNFInstances[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.allowedNFInstances[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.allowedNFInstances[1];
        TRUE : consumer.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(consumer.nfService2.operation2.allowedNFInstances[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.allowedNFInstances[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.allowedNFInstances[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.allowedNFInstances[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.allowedNFInstances[2];
        TRUE : consumer.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(consumer.nfService2.operation2.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.allowedNFTypes[1];
        TRUE : consumer.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(consumer.nfService2.operation2.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.allowedNFTypes[2];
        TRUE : consumer.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(consumer.nfService2.operation2.opName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.opName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.opName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.opName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.opName;
        TRUE : consumer.nfService2.operation2.opName;
    esac;
    next(consumer.nfService2.operation2.opScope[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.opScope[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.opScope[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.opScope[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.opScope[1];
        TRUE : consumer.nfService2.operation2.opScope[1];
    esac;
    next(consumer.nfService2.operation2.opScope[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.opScope[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.opScope[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.opScope[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.opScope[2];
        TRUE : consumer.nfService2.operation2.opScope[2];
    esac;
    next(consumer.nfService2.operation2.param1.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.param1.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.param1.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.param1.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.param1.isSensitive;
        TRUE : consumer.nfService2.operation2.param1.isSensitive;
    esac;
    next(consumer.nfService2.operation2.param1.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.param1.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.param1.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.param1.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.param1.name;
        TRUE : consumer.nfService2.operation2.param1.name;
    esac;
    next(consumer.nfService2.operation2.param1.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.param1.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.param1.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.param1.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.param1.value;
        TRUE : consumer.nfService2.operation2.param1.value;
    esac;
    next(consumer.nfService2.operation2.param2.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.param2.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.param2.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.param2.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.param2.isSensitive;
        TRUE : consumer.nfService2.operation2.param2.isSensitive;
    esac;
    next(consumer.nfService2.operation2.param2.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.param2.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.param2.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.param2.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.param2.name;
        TRUE : consumer.nfService2.operation2.param2.name;
    esac;
    next(consumer.nfService2.operation2.param2.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService2.operation2.param2.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService2.operation2.param2.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService2.operation2.param2.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService2.operation2.param2.value;
        TRUE : consumer.nfService2.operation2.param2.value;
    esac;

---------- begin NFDiscoveryRequest init ----------
    init(nfDiscoveryRequest.requesterID) := none;
    init(nfDiscoveryRequest.targetNFType) := none;
    init(nfDiscoveryRequest.requesterNFType) := none;
    init(nfDiscoveryRequest.sNssais) := none;
    init(nfDiscoveryRequest.serviceName) := none;
    init(nfDiscoveryRequest.targetNfInstanceId) := none;
    init(nfDiscoveryRequest.requesterSNssais) := none;

---------- begin NFDiscoveryRequest next ----------
    next(nfDiscoveryRequest.requesterID) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3, 4, 5};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : consumer.nfInstanceId;
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & accessToken.isTokenValid & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfInstanceId;
        TRUE: nfDiscoveryRequest.requesterID;
    esac;
    next(nfDiscoveryRequest.targetNFType) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : accessToken.aud_NFType;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : accessToken.aud_NFType;
        TRUE: nfDiscoveryRequest.targetNFType;
    esac;
    next(nfDiscoveryRequest.requesterNFType) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : consumer.nfType;
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfType;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : consumer.nfType;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfType;
        TRUE: nfDiscoveryRequest.requesterNFType;
    esac;
    next(nfDiscoveryRequest.sNssais) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, 1, 2, 3};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : {none, 1, 2, 3};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, 1, 2, 3};
        TRUE: nfDiscoveryRequest.sNssais;
    esac;
    next(nfDiscoveryRequest.serviceName) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : accessToken.scopeService;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : accessToken.scopeService;
        TRUE: nfDiscoveryRequest.serviceName;
    esac;
    next(nfDiscoveryRequest.targetNfInstanceId) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3, 4, 5};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, producer1.nfInstanceId, producer2.nfInstanceId, producer3.nfInstanceId};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, producer1.nfInstanceId, producer2.nfInstanceId, producer3.nfInstanceId};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : {none, 1, 2, 3, 4, 5};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, 1, 2, 3, 4, 5};
        TRUE: nfDiscoveryRequest.targetNfInstanceId;
    esac;
    next(nfDiscoveryRequest.requesterSNssais) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, consumer.sNssais[1], consumer.sNssais[2]};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, consumer.sNssais[1], consumer.sNssais[2]};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : {none, consumer.sNssais[1], consumer.sNssais[2]};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, consumer.sNssais[1], consumer.sNssais[2]};
        TRUE: nfDiscoveryRequest.requesterSNssais;
    esac;

    init(producer.model_id) := 0;
    init(producer.CCA_subject) := none;
    init(producer.nfInstanceId) := none;
    init(producer.nfType) := none;
    init(producer.nfStatus) := none;
    init(producer.sNssais[1]) := none;
    init(producer.sNssais[2]) := none;
    init(producer.allowedNFTypes[1]) := none;
    init(producer.allowedNFTypes[2]) := none;
    init(producer.allowedsNssais[1]) := none;
    init(producer.allowedsNssais[2]) := none;
    init(producer.load) := 0;
    init(producer.capacity) := 0;
    init(producer.priority) := 0;
    init(producer.nfService1.allowedNFTypes[1]) := none;
    init(producer.nfService1.allowedNFTypes[2]) := none;
    init(producer.nfService1.load) := 0;
    init(producer.nfService1.capacity) := 0;
    init(producer.nfService1.oauth2Required) := FALSE;
    init(producer.nfService1.priority) := 0;
    init(producer.nfService1.serviceInstanceId) := none;
    init(producer.nfService1.serviceName) := none;
    init(producer.nfService1.serviceStatus) := none;
    init(producer.nfService1.sNssais[1]) := none;
    init(producer.nfService1.sNssais[2]) := none;
    init(producer.nfService1.allowedsNssais[1]) := none;
    init(producer.nfService1.allowedsNssais[2]) := none;
    init(producer.nfService1.operation1.allowedNFInstances[1]) := none;
    init(producer.nfService1.operation1.allowedNFInstances[2]) := none;
    init(producer.nfService1.operation1.allowedNFTypes[1]) := none;
    init(producer.nfService1.operation1.allowedNFTypes[2]) := none;
    init(producer.nfService1.operation1.opName) := none;
    init(producer.nfService1.operation1.opScope[1]) := none;
    init(producer.nfService1.operation1.opScope[2]) := none;
    init(producer.nfService1.operation1.param1.isSensitive) := FALSE;
    init(producer.nfService1.operation1.param1.name) := none;
    init(producer.nfService1.operation1.param1.value) := 0;
    init(producer.nfService1.operation1.param2.isSensitive) := FALSE;
    init(producer.nfService1.operation1.param2.name) := none;
    init(producer.nfService1.operation1.param2.value) := 0;
    init(producer.nfService1.operation2.allowedNFInstances[1]) := none;
    init(producer.nfService1.operation2.allowedNFInstances[2]) := none;
    init(producer.nfService1.operation2.allowedNFTypes[1]) := none;
    init(producer.nfService1.operation2.allowedNFTypes[2]) := none;
    init(producer.nfService1.operation2.opName) := none;
    init(producer.nfService1.operation2.opScope[1]) := none;
    init(producer.nfService1.operation2.opScope[2]) := none;
    init(producer.nfService1.operation2.param1.isSensitive) := FALSE;
    init(producer.nfService1.operation2.param1.name) := none;
    init(producer.nfService1.operation2.param1.value) := 0;
    init(producer.nfService1.operation2.param2.isSensitive) := FALSE;
    init(producer.nfService1.operation2.param2.name) := none;
    init(producer.nfService1.operation2.param2.value) := 0;
    init(producer.nfService2.allowedNFTypes[1]) := none;
    init(producer.nfService2.allowedNFTypes[2]) := none;
    init(producer.nfService2.load) := 0;
    init(producer.nfService2.capacity) := 0;
    init(producer.nfService2.oauth2Required) := FALSE;
    init(producer.nfService2.priority) := 0;
    init(producer.nfService2.serviceInstanceId) := none;
    init(producer.nfService2.serviceName) := none;
    init(producer.nfService2.serviceStatus) := none;
    init(producer.nfService2.sNssais[1]) := none;
    init(producer.nfService2.sNssais[2]) := none;
    init(producer.nfService2.allowedsNssais[1]) := none;
    init(producer.nfService2.allowedsNssais[2]) := none;
    init(producer.nfService2.operation1.allowedNFInstances[1]) := none;
    init(producer.nfService2.operation1.allowedNFInstances[2]) := none;
    init(producer.nfService2.operation1.allowedNFTypes[1]) := none;
    init(producer.nfService2.operation1.allowedNFTypes[2]) := none;
    init(producer.nfService2.operation1.opName) := none;
    init(producer.nfService2.operation1.opScope[1]) := none;
    init(producer.nfService2.operation1.opScope[2]) := none;
    init(producer.nfService2.operation1.param1.isSensitive) := FALSE;
    init(producer.nfService2.operation1.param1.name) := none;
    init(producer.nfService2.operation1.param1.value) := 0;
    init(producer.nfService2.operation1.param2.isSensitive) := FALSE;
    init(producer.nfService2.operation1.param2.name) := none;
    init(producer.nfService2.operation1.param2.value) := 0;
    init(producer.nfService2.operation2.allowedNFInstances[1]) := none;
    init(producer.nfService2.operation2.allowedNFInstances[2]) := none;
    init(producer.nfService2.operation2.allowedNFTypes[1]) := none;
    init(producer.nfService2.operation2.allowedNFTypes[2]) := none;
    init(producer.nfService2.operation2.opName) := none;
    init(producer.nfService2.operation2.opScope[1]) := none;
    init(producer.nfService2.operation2.opScope[2]) := none;
    init(producer.nfService2.operation2.param1.isSensitive) := FALSE;
    init(producer.nfService2.operation2.param1.name) := none;
    init(producer.nfService2.operation2.param1.value) := 0;
    init(producer.nfService2.operation2.param2.isSensitive) := FALSE;
    init(producer.nfService2.operation2.param2.name) := none;
    init(producer.nfService2.operation2.param2.value) := 0;

    next(producer.model_id) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.model_id;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.model_id;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.model_id;
        (isNFDiscovered1) : producer1.model_id;
        (isNFDiscovered2) : producer2.model_id;
        (isNFDiscovered3) : producer3.model_id;
        (producer.model_id = producer1.model_id) : producer1.model_id;
        (producer.model_id = producer2.model_id) : producer2.model_id;
        (producer.model_id = producer3.model_id) : producer3.model_id;
        TRUE : producer.model_id;
    esac;
    next(producer.CCA_subject) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.CCA_subject;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.CCA_subject;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.CCA_subject;
        (isNFDiscovered1) : producer1.CCA_subject;
        (isNFDiscovered2) : producer2.CCA_subject;
        (isNFDiscovered3) : producer3.CCA_subject;
        (producer.model_id = producer1.model_id) : producer1.CCA_subject;
        (producer.model_id = producer2.model_id) : producer2.CCA_subject;
        (producer.model_id = producer3.model_id) : producer3.CCA_subject;
        TRUE : producer.CCA_subject;
    esac;
    next(producer.nfInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfInstanceId;
        (isNFDiscovered1) : producer1.nfInstanceId;
        (isNFDiscovered2) : producer2.nfInstanceId;
        (isNFDiscovered3) : producer3.nfInstanceId;
        (producer.model_id = producer1.model_id) : producer1.nfInstanceId;
        (producer.model_id = producer2.model_id) : producer2.nfInstanceId;
        (producer.model_id = producer3.model_id) : producer3.nfInstanceId;
        TRUE : producer.nfInstanceId;
    esac;
    next(producer.nfType) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfType;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfType;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfType;
        (isNFDiscovered1) : producer1.nfType;
        (isNFDiscovered2) : producer2.nfType;
        (isNFDiscovered3) : producer3.nfType;
        (producer.model_id = producer1.model_id) : producer1.nfType;
        (producer.model_id = producer2.model_id) : producer2.nfType;
        (producer.model_id = producer3.model_id) : producer3.nfType;
        TRUE : producer.nfType;
    esac;
    next(producer.nfStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfStatus;
        (isNFDiscovered1) : producer1.nfStatus;
        (isNFDiscovered2) : producer2.nfStatus;
        (isNFDiscovered3) : producer3.nfStatus;
        (producer.model_id = producer1.model_id) : producer1.nfStatus;
        (producer.model_id = producer2.model_id) : producer2.nfStatus;
        (producer.model_id = producer3.model_id) : producer3.nfStatus;
        TRUE : producer.nfStatus;
    esac;
    next(producer.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.sNssais[1];
        (isNFDiscovered1) : producer1.sNssais[1];
        (isNFDiscovered2) : producer2.sNssais[1];
        (isNFDiscovered3) : producer3.sNssais[1];
        (producer.model_id = producer1.model_id) : producer1.sNssais[1];
        (producer.model_id = producer2.model_id) : producer2.sNssais[1];
        (producer.model_id = producer3.model_id) : producer3.sNssais[1];
        TRUE : producer.sNssais[1];
    esac;
    next(producer.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.sNssais[2];
        (isNFDiscovered1) : producer1.sNssais[2];
        (isNFDiscovered2) : producer2.sNssais[2];
        (isNFDiscovered3) : producer3.sNssais[2];
        (producer.model_id = producer1.model_id) : producer1.sNssais[2];
        (producer.model_id = producer2.model_id) : producer2.sNssais[2];
        (producer.model_id = producer3.model_id) : producer3.sNssais[2];
        TRUE : producer.sNssais[2];
    esac;
    next(producer.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.allowedNFTypes[1];
        (producer.model_id = producer3.model_id) : producer3.allowedNFTypes[1];
        TRUE : producer.allowedNFTypes[1];
    esac;
    next(producer.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.allowedNFTypes[2];
        (producer.model_id = producer3.model_id) : producer3.allowedNFTypes[2];
        TRUE : producer.allowedNFTypes[2];
    esac;
    next(producer.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedsNssais[1];
        (isNFDiscovered1) : producer1.allowedsNssais[1];
        (isNFDiscovered2) : producer2.allowedsNssais[1];
        (isNFDiscovered3) : producer3.allowedsNssais[1];
        (producer.model_id = producer1.model_id) : producer1.allowedsNssais[1];
        (producer.model_id = producer2.model_id) : producer2.allowedsNssais[1];
        (producer.model_id = producer3.model_id) : producer3.allowedsNssais[1];
        TRUE : producer.allowedsNssais[1];
    esac;
    next(producer.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedsNssais[2];
        (isNFDiscovered1) : producer1.allowedsNssais[2];
        (isNFDiscovered2) : producer2.allowedsNssais[2];
        (isNFDiscovered3) : producer3.allowedsNssais[2];
        (producer.model_id = producer1.model_id) : producer1.allowedsNssais[2];
        (producer.model_id = producer2.model_id) : producer2.allowedsNssais[2];
        (producer.model_id = producer3.model_id) : producer3.allowedsNssais[2];
        TRUE : producer.allowedsNssais[2];
    esac;
    next(producer.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.load;
        (isNFDiscovered1) : producer1.load;
        (isNFDiscovered2) : producer2.load;
        (isNFDiscovered3) : producer3.load;
        (producer.model_id = producer1.model_id) : producer1.load;
        (producer.model_id = producer2.model_id) : producer2.load;
        (producer.model_id = producer3.model_id) : producer3.load;
        TRUE : producer.load;
    esac;
    next(producer.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.capacity;
        (isNFDiscovered1) : producer1.capacity;
        (isNFDiscovered2) : producer2.capacity;
        (isNFDiscovered3) : producer3.capacity;
        (producer.model_id = producer1.model_id) : producer1.capacity;
        (producer.model_id = producer2.model_id) : producer2.capacity;
        (producer.model_id = producer3.model_id) : producer3.capacity;
        TRUE : producer.capacity;
    esac;
    next(producer.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.priority;
        (isNFDiscovered1) : producer1.priority;
        (isNFDiscovered2) : producer2.priority;
        (isNFDiscovered3) : producer3.priority;
        (producer.model_id = producer1.model_id) : producer1.priority;
        (producer.model_id = producer2.model_id) : producer2.priority;
        (producer.model_id = producer3.model_id) : producer3.priority;
        TRUE : producer.priority;
    esac;
    next(producer.nfService1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService1.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.nfService1.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedNFTypes[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.allowedNFTypes[1];
        TRUE : producer.nfService1.allowedNFTypes[1];
    esac;
    next(producer.nfService1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService1.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.nfService1.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedNFTypes[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.allowedNFTypes[2];
        TRUE : producer.nfService1.allowedNFTypes[2];
    esac;
    next(producer.nfService1.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.load;
        (isNFDiscovered1) : producer1.nfService1.load;
        (isNFDiscovered2) : producer2.nfService1.load;
        (isNFDiscovered3) : producer3.nfService1.load;
        (producer.model_id = producer1.model_id) : producer1.nfService1.load;
        (producer.model_id = producer2.model_id) : producer2.nfService1.load;
        (producer.model_id = producer3.model_id) : producer3.nfService1.load;
        TRUE : producer.nfService1.load;
    esac;
    next(producer.nfService1.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.capacity;
        (isNFDiscovered1) : producer1.nfService1.capacity;
        (isNFDiscovered2) : producer2.nfService1.capacity;
        (isNFDiscovered3) : producer3.nfService1.capacity;
        (producer.model_id = producer1.model_id) : producer1.nfService1.capacity;
        (producer.model_id = producer2.model_id) : producer2.nfService1.capacity;
        (producer.model_id = producer3.model_id) : producer3.nfService1.capacity;
        TRUE : producer.nfService1.capacity;
    esac;
    next(producer.nfService1.oauth2Required) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.oauth2Required;
        (isNFDiscovered1) : producer1.nfService1.oauth2Required;
        (isNFDiscovered2) : producer2.nfService1.oauth2Required;
        (isNFDiscovered3) : producer3.nfService1.oauth2Required;
        (producer.model_id = producer1.model_id) : producer1.nfService1.oauth2Required;
        (producer.model_id = producer2.model_id) : producer2.nfService1.oauth2Required;
        (producer.model_id = producer3.model_id) : producer3.nfService1.oauth2Required;
        TRUE : producer.nfService1.oauth2Required;
    esac;
    next(producer.nfService1.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.priority;
        (isNFDiscovered1) : producer1.nfService1.priority;
        (isNFDiscovered2) : producer2.nfService1.priority;
        (isNFDiscovered3) : producer3.nfService1.priority;
        (producer.model_id = producer1.model_id) : producer1.nfService1.priority;
        (producer.model_id = producer2.model_id) : producer2.nfService1.priority;
        (producer.model_id = producer3.model_id) : producer3.nfService1.priority;
        TRUE : producer.nfService1.priority;
    esac;
    next(producer.nfService1.serviceInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.serviceInstanceId;
        (isNFDiscovered1) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered2) : producer2.nfService1.serviceInstanceId;
        (isNFDiscovered3) : producer3.nfService1.serviceInstanceId;
        (producer.model_id = producer1.model_id) : producer1.nfService1.serviceInstanceId;
        (producer.model_id = producer2.model_id) : producer2.nfService1.serviceInstanceId;
        (producer.model_id = producer3.model_id) : producer3.nfService1.serviceInstanceId;
        TRUE : producer.nfService1.serviceInstanceId;
    esac;
    next(producer.nfService1.serviceName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.serviceName;
        (isNFDiscovered1) : producer1.nfService1.serviceName;
        (isNFDiscovered2) : producer2.nfService1.serviceName;
        (isNFDiscovered3) : producer3.nfService1.serviceName;
        (producer.model_id = producer1.model_id) : producer1.nfService1.serviceName;
        (producer.model_id = producer2.model_id) : producer2.nfService1.serviceName;
        (producer.model_id = producer3.model_id) : producer3.nfService1.serviceName;
        TRUE : producer.nfService1.serviceName;
    esac;
    next(producer.nfService1.serviceStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.serviceStatus;
        (isNFDiscovered1) : producer1.nfService1.serviceStatus;
        (isNFDiscovered2) : producer2.nfService1.serviceStatus;
        (isNFDiscovered3) : producer3.nfService1.serviceStatus;
        (producer.model_id = producer1.model_id) : producer1.nfService1.serviceStatus;
        (producer.model_id = producer2.model_id) : producer2.nfService1.serviceStatus;
        (producer.model_id = producer3.model_id) : producer3.nfService1.serviceStatus;
        TRUE : producer.nfService1.serviceStatus;
    esac;
    next(producer.nfService1.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.sNssais[1];
        (isNFDiscovered1) : producer1.nfService1.sNssais[1];
        (isNFDiscovered2) : producer2.nfService1.sNssais[1];
        (isNFDiscovered3) : producer3.nfService1.sNssais[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.sNssais[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.sNssais[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.sNssais[1];
        TRUE : producer.nfService1.sNssais[1];
    esac;
    next(producer.nfService1.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.sNssais[2];
        (isNFDiscovered1) : producer1.nfService1.sNssais[2];
        (isNFDiscovered2) : producer2.nfService1.sNssais[2];
        (isNFDiscovered3) : producer3.nfService1.sNssais[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.sNssais[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.sNssais[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.sNssais[2];
        TRUE : producer.nfService1.sNssais[2];
    esac;
    next(producer.nfService1.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.allowedsNssais[1];
        (isNFDiscovered1) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered2) : producer2.nfService1.allowedsNssais[1];
        (isNFDiscovered3) : producer3.nfService1.allowedsNssais[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedsNssais[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedsNssais[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.allowedsNssais[1];
        TRUE : producer.nfService1.allowedsNssais[1];
    esac;
    next(producer.nfService1.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.allowedsNssais[2];
        (isNFDiscovered1) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered2) : producer2.nfService1.allowedsNssais[2];
        (isNFDiscovered3) : producer3.nfService1.allowedsNssais[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedsNssais[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedsNssais[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.allowedsNssais[2];
        TRUE : producer.nfService1.allowedsNssais[2];
    esac;
    next(producer.nfService1.operation1.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered3) : producer3.nfService1.operation1.allowedNFInstances[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFInstances[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFInstances[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.allowedNFInstances[1];
        TRUE : producer.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(producer.nfService1.operation1.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered3) : producer3.nfService1.operation1.allowedNFInstances[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFInstances[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFInstances[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.allowedNFInstances[2];
        TRUE : producer.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(producer.nfService1.operation1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.nfService1.operation1.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFTypes[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.allowedNFTypes[1];
        TRUE : producer.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(producer.nfService1.operation1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.nfService1.operation1.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFTypes[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.allowedNFTypes[2];
        TRUE : producer.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(producer.nfService1.operation1.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.opName;
        (isNFDiscovered1) : producer1.nfService1.operation1.opName;
        (isNFDiscovered2) : producer2.nfService1.operation1.opName;
        (isNFDiscovered3) : producer3.nfService1.operation1.opName;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opName;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opName;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.opName;
        TRUE : producer.nfService1.operation1.opName;
    esac;
    next(producer.nfService1.operation1.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.opScope[1];
        (isNFDiscovered1) : producer1.nfService1.operation1.opScope[1];
        (isNFDiscovered2) : producer2.nfService1.operation1.opScope[1];
        (isNFDiscovered3) : producer3.nfService1.operation1.opScope[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opScope[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opScope[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.opScope[1];
        TRUE : producer.nfService1.operation1.opScope[1];
    esac;
    next(producer.nfService1.operation1.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.opScope[2];
        (isNFDiscovered1) : producer1.nfService1.operation1.opScope[2];
        (isNFDiscovered2) : producer2.nfService1.operation1.opScope[2];
        (isNFDiscovered3) : producer3.nfService1.operation1.opScope[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opScope[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opScope[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.opScope[2];
        TRUE : producer.nfService1.operation1.opScope[2];
    esac;
    next(producer.nfService1.operation1.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered3) : producer3.nfService1.operation1.param1.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.param1.isSensitive;
        TRUE : producer.nfService1.operation1.param1.isSensitive;
    esac;
    next(producer.nfService1.operation1.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.param1.name;
        (isNFDiscovered1) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered2) : producer2.nfService1.operation1.param1.name;
        (isNFDiscovered3) : producer3.nfService1.operation1.param1.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.name;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.param1.name;
        TRUE : producer.nfService1.operation1.param1.name;
    esac;
    next(producer.nfService1.operation1.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.param1.value;
        (isNFDiscovered1) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered2) : producer2.nfService1.operation1.param1.value;
        (isNFDiscovered3) : producer3.nfService1.operation1.param1.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.value;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.param1.value;
        TRUE : producer.nfService1.operation1.param1.value;
    esac;
    next(producer.nfService1.operation1.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered3) : producer3.nfService1.operation1.param2.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param2.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param2.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.param2.isSensitive;
        TRUE : producer.nfService1.operation1.param2.isSensitive;
    esac;
    next(producer.nfService1.operation1.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.param2.name;
        (isNFDiscovered1) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered2) : producer2.nfService1.operation1.param2.name;
        (isNFDiscovered3) : producer3.nfService1.operation1.param2.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param2.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param2.name;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.param2.name;
        TRUE : producer.nfService1.operation1.param2.name;
    esac;
    next(producer.nfService1.operation1.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation1.param2.value;
        (isNFDiscovered1) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered2) : producer2.nfService1.operation1.param2.value;
        (isNFDiscovered3) : producer3.nfService1.operation1.param2.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param2.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param2.value;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation1.param2.value;
        TRUE : producer.nfService1.operation1.param2.value;
    esac;
    next(producer.nfService1.operation2.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered3) : producer3.nfService1.operation2.allowedNFInstances[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFInstances[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFInstances[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.allowedNFInstances[1];
        TRUE : producer.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(producer.nfService1.operation2.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered3) : producer3.nfService1.operation2.allowedNFInstances[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFInstances[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFInstances[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.allowedNFInstances[2];
        TRUE : producer.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(producer.nfService1.operation2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.nfService1.operation2.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFTypes[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.allowedNFTypes[1];
        TRUE : producer.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(producer.nfService1.operation2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.nfService1.operation2.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFTypes[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.allowedNFTypes[2];
        TRUE : producer.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(producer.nfService1.operation2.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.opName;
        (isNFDiscovered1) : producer1.nfService1.operation2.opName;
        (isNFDiscovered2) : producer2.nfService1.operation2.opName;
        (isNFDiscovered3) : producer3.nfService1.operation2.opName;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.opName;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.opName;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.opName;
        TRUE : producer.nfService1.operation2.opName;
    esac;
    next(producer.nfService1.operation2.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.opScope[1];
        (isNFDiscovered1) : producer1.nfService1.operation2.opScope[1];
        (isNFDiscovered2) : producer2.nfService1.operation2.opScope[1];
        (isNFDiscovered3) : producer3.nfService1.operation2.opScope[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.opScope[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.opScope[1];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.opScope[1];
        TRUE : producer.nfService1.operation2.opScope[1];
    esac;
    next(producer.nfService1.operation2.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.opScope[2];
        (isNFDiscovered1) : producer1.nfService1.operation2.opScope[2];
        (isNFDiscovered2) : producer2.nfService1.operation2.opScope[2];
        (isNFDiscovered3) : producer3.nfService1.operation2.opScope[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.opScope[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.opScope[2];
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.opScope[2];
        TRUE : producer.nfService1.operation2.opScope[2];
    esac;
    next(producer.nfService1.operation2.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered3) : producer3.nfService1.operation2.param1.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param1.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param1.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.param1.isSensitive;
        TRUE : producer.nfService1.operation2.param1.isSensitive;
    esac;
    next(producer.nfService1.operation2.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.param1.name;
        (isNFDiscovered1) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered2) : producer2.nfService1.operation2.param1.name;
        (isNFDiscovered3) : producer3.nfService1.operation2.param1.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param1.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param1.name;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.param1.name;
        TRUE : producer.nfService1.operation2.param1.name;
    esac;
    next(producer.nfService1.operation2.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.param1.value;
        (isNFDiscovered1) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered2) : producer2.nfService1.operation2.param1.value;
        (isNFDiscovered3) : producer3.nfService1.operation2.param1.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param1.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param1.value;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.param1.value;
        TRUE : producer.nfService1.operation2.param1.value;
    esac;
    next(producer.nfService1.operation2.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered3) : producer3.nfService1.operation2.param2.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param2.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param2.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.param2.isSensitive;
        TRUE : producer.nfService1.operation2.param2.isSensitive;
    esac;
    next(producer.nfService1.operation2.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.param2.name;
        (isNFDiscovered1) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered2) : producer2.nfService1.operation2.param2.name;
        (isNFDiscovered3) : producer3.nfService1.operation2.param2.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param2.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param2.name;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.param2.name;
        TRUE : producer.nfService1.operation2.param2.name;
    esac;
    next(producer.nfService1.operation2.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService1.operation2.param2.value;
        (isNFDiscovered1) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered2) : producer2.nfService1.operation2.param2.value;
        (isNFDiscovered3) : producer3.nfService1.operation2.param2.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param2.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param2.value;
        (producer.model_id = producer3.model_id) : producer3.nfService1.operation2.param2.value;
        TRUE : producer.nfService1.operation2.param2.value;
    esac;
    next(producer.nfService2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService2.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService2.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.nfService2.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.allowedNFTypes[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.allowedNFTypes[1];
        TRUE : producer.nfService2.allowedNFTypes[1];
    esac;
    next(producer.nfService2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService2.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService2.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.nfService2.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.allowedNFTypes[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.allowedNFTypes[2];
        TRUE : producer.nfService2.allowedNFTypes[2];
    esac;
    next(producer.nfService2.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.load;
        (isNFDiscovered1) : producer1.nfService2.load;
        (isNFDiscovered2) : producer2.nfService2.load;
        (isNFDiscovered3) : producer3.nfService2.load;
        (producer.model_id = producer1.model_id) : producer1.nfService2.load;
        (producer.model_id = producer2.model_id) : producer2.nfService2.load;
        (producer.model_id = producer3.model_id) : producer3.nfService2.load;
        TRUE : producer.nfService2.load;
    esac;
    next(producer.nfService2.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.capacity;
        (isNFDiscovered1) : producer1.nfService2.capacity;
        (isNFDiscovered2) : producer2.nfService2.capacity;
        (isNFDiscovered3) : producer3.nfService2.capacity;
        (producer.model_id = producer1.model_id) : producer1.nfService2.capacity;
        (producer.model_id = producer2.model_id) : producer2.nfService2.capacity;
        (producer.model_id = producer3.model_id) : producer3.nfService2.capacity;
        TRUE : producer.nfService2.capacity;
    esac;
    next(producer.nfService2.oauth2Required) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.oauth2Required;
        (isNFDiscovered1) : producer1.nfService2.oauth2Required;
        (isNFDiscovered2) : producer2.nfService2.oauth2Required;
        (isNFDiscovered3) : producer3.nfService2.oauth2Required;
        (producer.model_id = producer1.model_id) : producer1.nfService2.oauth2Required;
        (producer.model_id = producer2.model_id) : producer2.nfService2.oauth2Required;
        (producer.model_id = producer3.model_id) : producer3.nfService2.oauth2Required;
        TRUE : producer.nfService2.oauth2Required;
    esac;
    next(producer.nfService2.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.priority;
        (isNFDiscovered1) : producer1.nfService2.priority;
        (isNFDiscovered2) : producer2.nfService2.priority;
        (isNFDiscovered3) : producer3.nfService2.priority;
        (producer.model_id = producer1.model_id) : producer1.nfService2.priority;
        (producer.model_id = producer2.model_id) : producer2.nfService2.priority;
        (producer.model_id = producer3.model_id) : producer3.nfService2.priority;
        TRUE : producer.nfService2.priority;
    esac;
    next(producer.nfService2.serviceInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.serviceInstanceId;
        (isNFDiscovered1) : producer1.nfService2.serviceInstanceId;
        (isNFDiscovered2) : producer2.nfService2.serviceInstanceId;
        (isNFDiscovered3) : producer3.nfService2.serviceInstanceId;
        (producer.model_id = producer1.model_id) : producer1.nfService2.serviceInstanceId;
        (producer.model_id = producer2.model_id) : producer2.nfService2.serviceInstanceId;
        (producer.model_id = producer3.model_id) : producer3.nfService2.serviceInstanceId;
        TRUE : producer.nfService2.serviceInstanceId;
    esac;
    next(producer.nfService2.serviceName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.serviceName;
        (isNFDiscovered1) : producer1.nfService2.serviceName;
        (isNFDiscovered2) : producer2.nfService2.serviceName;
        (isNFDiscovered3) : producer3.nfService2.serviceName;
        (producer.model_id = producer1.model_id) : producer1.nfService2.serviceName;
        (producer.model_id = producer2.model_id) : producer2.nfService2.serviceName;
        (producer.model_id = producer3.model_id) : producer3.nfService2.serviceName;
        TRUE : producer.nfService2.serviceName;
    esac;
    next(producer.nfService2.serviceStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.serviceStatus;
        (isNFDiscovered1) : producer1.nfService2.serviceStatus;
        (isNFDiscovered2) : producer2.nfService2.serviceStatus;
        (isNFDiscovered3) : producer3.nfService2.serviceStatus;
        (producer.model_id = producer1.model_id) : producer1.nfService2.serviceStatus;
        (producer.model_id = producer2.model_id) : producer2.nfService2.serviceStatus;
        (producer.model_id = producer3.model_id) : producer3.nfService2.serviceStatus;
        TRUE : producer.nfService2.serviceStatus;
    esac;
    next(producer.nfService2.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.sNssais[1];
        (isNFDiscovered1) : producer1.nfService2.sNssais[1];
        (isNFDiscovered2) : producer2.nfService2.sNssais[1];
        (isNFDiscovered3) : producer3.nfService2.sNssais[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.sNssais[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.sNssais[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.sNssais[1];
        TRUE : producer.nfService2.sNssais[1];
    esac;
    next(producer.nfService2.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.sNssais[2];
        (isNFDiscovered1) : producer1.nfService2.sNssais[2];
        (isNFDiscovered2) : producer2.nfService2.sNssais[2];
        (isNFDiscovered3) : producer3.nfService2.sNssais[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.sNssais[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.sNssais[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.sNssais[2];
        TRUE : producer.nfService2.sNssais[2];
    esac;
    next(producer.nfService2.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.allowedsNssais[1];
        (isNFDiscovered1) : producer1.nfService2.allowedsNssais[1];
        (isNFDiscovered2) : producer2.nfService2.allowedsNssais[1];
        (isNFDiscovered3) : producer3.nfService2.allowedsNssais[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.allowedsNssais[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.allowedsNssais[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.allowedsNssais[1];
        TRUE : producer.nfService2.allowedsNssais[1];
    esac;
    next(producer.nfService2.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.allowedsNssais[2];
        (isNFDiscovered1) : producer1.nfService2.allowedsNssais[2];
        (isNFDiscovered2) : producer2.nfService2.allowedsNssais[2];
        (isNFDiscovered3) : producer3.nfService2.allowedsNssais[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.allowedsNssais[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.allowedsNssais[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.allowedsNssais[2];
        TRUE : producer.nfService2.allowedsNssais[2];
    esac;
    next(producer.nfService2.operation1.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered1) : producer1.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered2) : producer2.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered3) : producer3.nfService2.operation1.allowedNFInstances[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.allowedNFInstances[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.allowedNFInstances[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.allowedNFInstances[1];
        TRUE : producer.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(producer.nfService2.operation1.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered1) : producer1.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered2) : producer2.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered3) : producer3.nfService2.operation1.allowedNFInstances[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.allowedNFInstances[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.allowedNFInstances[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.allowedNFInstances[2];
        TRUE : producer.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(producer.nfService2.operation1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.nfService2.operation1.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.allowedNFTypes[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.allowedNFTypes[1];
        TRUE : producer.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(producer.nfService2.operation1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.nfService2.operation1.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.allowedNFTypes[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.allowedNFTypes[2];
        TRUE : producer.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(producer.nfService2.operation1.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.opName;
        (isNFDiscovered1) : producer1.nfService2.operation1.opName;
        (isNFDiscovered2) : producer2.nfService2.operation1.opName;
        (isNFDiscovered3) : producer3.nfService2.operation1.opName;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.opName;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.opName;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.opName;
        TRUE : producer.nfService2.operation1.opName;
    esac;
    next(producer.nfService2.operation1.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.opScope[1];
        (isNFDiscovered1) : producer1.nfService2.operation1.opScope[1];
        (isNFDiscovered2) : producer2.nfService2.operation1.opScope[1];
        (isNFDiscovered3) : producer3.nfService2.operation1.opScope[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.opScope[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.opScope[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.opScope[1];
        TRUE : producer.nfService2.operation1.opScope[1];
    esac;
    next(producer.nfService2.operation1.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.opScope[2];
        (isNFDiscovered1) : producer1.nfService2.operation1.opScope[2];
        (isNFDiscovered2) : producer2.nfService2.operation1.opScope[2];
        (isNFDiscovered3) : producer3.nfService2.operation1.opScope[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.opScope[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.opScope[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.opScope[2];
        TRUE : producer.nfService2.operation1.opScope[2];
    esac;
    next(producer.nfService2.operation1.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered1) : producer1.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered2) : producer2.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered3) : producer3.nfService2.operation1.param1.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.param1.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.param1.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.param1.isSensitive;
        TRUE : producer.nfService2.operation1.param1.isSensitive;
    esac;
    next(producer.nfService2.operation1.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.param1.name;
        (isNFDiscovered1) : producer1.nfService2.operation1.param1.name;
        (isNFDiscovered2) : producer2.nfService2.operation1.param1.name;
        (isNFDiscovered3) : producer3.nfService2.operation1.param1.name;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.param1.name;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.param1.name;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.param1.name;
        TRUE : producer.nfService2.operation1.param1.name;
    esac;
    next(producer.nfService2.operation1.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.param1.value;
        (isNFDiscovered1) : producer1.nfService2.operation1.param1.value;
        (isNFDiscovered2) : producer2.nfService2.operation1.param1.value;
        (isNFDiscovered3) : producer3.nfService2.operation1.param1.value;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.param1.value;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.param1.value;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.param1.value;
        TRUE : producer.nfService2.operation1.param1.value;
    esac;
    next(producer.nfService2.operation1.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered1) : producer1.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered2) : producer2.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered3) : producer3.nfService2.operation1.param2.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.param2.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.param2.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.param2.isSensitive;
        TRUE : producer.nfService2.operation1.param2.isSensitive;
    esac;
    next(producer.nfService2.operation1.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.param2.name;
        (isNFDiscovered1) : producer1.nfService2.operation1.param2.name;
        (isNFDiscovered2) : producer2.nfService2.operation1.param2.name;
        (isNFDiscovered3) : producer3.nfService2.operation1.param2.name;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.param2.name;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.param2.name;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.param2.name;
        TRUE : producer.nfService2.operation1.param2.name;
    esac;
    next(producer.nfService2.operation1.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation1.param2.value;
        (isNFDiscovered1) : producer1.nfService2.operation1.param2.value;
        (isNFDiscovered2) : producer2.nfService2.operation1.param2.value;
        (isNFDiscovered3) : producer3.nfService2.operation1.param2.value;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation1.param2.value;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation1.param2.value;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation1.param2.value;
        TRUE : producer.nfService2.operation1.param2.value;
    esac;
    next(producer.nfService2.operation2.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered1) : producer1.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered2) : producer2.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered3) : producer3.nfService2.operation2.allowedNFInstances[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.allowedNFInstances[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.allowedNFInstances[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.allowedNFInstances[1];
        TRUE : producer.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(producer.nfService2.operation2.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered1) : producer1.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered2) : producer2.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered3) : producer3.nfService2.operation2.allowedNFInstances[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.allowedNFInstances[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.allowedNFInstances[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.allowedNFInstances[2];
        TRUE : producer.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(producer.nfService2.operation2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.nfService2.operation2.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.allowedNFTypes[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.allowedNFTypes[1];
        TRUE : producer.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(producer.nfService2.operation2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.nfService2.operation2.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.allowedNFTypes[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.allowedNFTypes[2];
        TRUE : producer.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(producer.nfService2.operation2.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.opName;
        (isNFDiscovered1) : producer1.nfService2.operation2.opName;
        (isNFDiscovered2) : producer2.nfService2.operation2.opName;
        (isNFDiscovered3) : producer3.nfService2.operation2.opName;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.opName;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.opName;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.opName;
        TRUE : producer.nfService2.operation2.opName;
    esac;
    next(producer.nfService2.operation2.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.opScope[1];
        (isNFDiscovered1) : producer1.nfService2.operation2.opScope[1];
        (isNFDiscovered2) : producer2.nfService2.operation2.opScope[1];
        (isNFDiscovered3) : producer3.nfService2.operation2.opScope[1];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.opScope[1];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.opScope[1];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.opScope[1];
        TRUE : producer.nfService2.operation2.opScope[1];
    esac;
    next(producer.nfService2.operation2.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.opScope[2];
        (isNFDiscovered1) : producer1.nfService2.operation2.opScope[2];
        (isNFDiscovered2) : producer2.nfService2.operation2.opScope[2];
        (isNFDiscovered3) : producer3.nfService2.operation2.opScope[2];
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.opScope[2];
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.opScope[2];
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.opScope[2];
        TRUE : producer.nfService2.operation2.opScope[2];
    esac;
    next(producer.nfService2.operation2.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered1) : producer1.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered2) : producer2.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered3) : producer3.nfService2.operation2.param1.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.param1.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.param1.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.param1.isSensitive;
        TRUE : producer.nfService2.operation2.param1.isSensitive;
    esac;
    next(producer.nfService2.operation2.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.param1.name;
        (isNFDiscovered1) : producer1.nfService2.operation2.param1.name;
        (isNFDiscovered2) : producer2.nfService2.operation2.param1.name;
        (isNFDiscovered3) : producer3.nfService2.operation2.param1.name;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.param1.name;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.param1.name;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.param1.name;
        TRUE : producer.nfService2.operation2.param1.name;
    esac;
    next(producer.nfService2.operation2.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.param1.value;
        (isNFDiscovered1) : producer1.nfService2.operation2.param1.value;
        (isNFDiscovered2) : producer2.nfService2.operation2.param1.value;
        (isNFDiscovered3) : producer3.nfService2.operation2.param1.value;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.param1.value;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.param1.value;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.param1.value;
        TRUE : producer.nfService2.operation2.param1.value;
    esac;
    next(producer.nfService2.operation2.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered1) : producer1.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered2) : producer2.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered3) : producer3.nfService2.operation2.param2.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.param2.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.param2.isSensitive;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.param2.isSensitive;
        TRUE : producer.nfService2.operation2.param2.isSensitive;
    esac;
    next(producer.nfService2.operation2.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.param2.name;
        (isNFDiscovered1) : producer1.nfService2.operation2.param2.name;
        (isNFDiscovered2) : producer2.nfService2.operation2.param2.name;
        (isNFDiscovered3) : producer3.nfService2.operation2.param2.name;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.param2.name;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.param2.name;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.param2.name;
        TRUE : producer.nfService2.operation2.param2.name;
    esac;
    next(producer.nfService2.operation2.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfService2.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfService2.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfService2.operation2.param2.value;
        (isNFDiscovered1) : producer1.nfService2.operation2.param2.value;
        (isNFDiscovered2) : producer2.nfService2.operation2.param2.value;
        (isNFDiscovered3) : producer3.nfService2.operation2.param2.value;
        (producer.model_id = producer1.model_id) : producer1.nfService2.operation2.param2.value;
        (producer.model_id = producer2.model_id) : producer2.nfService2.operation2.param2.value;
        (producer.model_id = producer3.model_id) : producer3.nfService2.operation2.param2.value;
        TRUE : producer.nfService2.operation2.param2.value;
    esac;

    init(prod_at_consumer.model_id) := 0;
    init(prod_at_consumer.CCA_subject) := none;
    init(prod_at_consumer.nfInstanceId) := none;
    init(prod_at_consumer.nfType) := none;
    init(prod_at_consumer.nfStatus) := none;
    init(prod_at_consumer.sNssais[1]) := none;
    init(prod_at_consumer.sNssais[2]) := none;
    init(prod_at_consumer.allowedNFTypes[1]) := none;
    init(prod_at_consumer.allowedNFTypes[2]) := none;
    init(prod_at_consumer.allowedsNssais[1]) := none;
    init(prod_at_consumer.allowedsNssais[2]) := none;
    init(prod_at_consumer.load) := 0;
    init(prod_at_consumer.capacity) := 0;
    init(prod_at_consumer.priority) := 0;
    init(prod_at_consumer.nfService1.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService1.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService1.load) := 0;
    init(prod_at_consumer.nfService1.capacity) := 0;
    init(prod_at_consumer.nfService1.oauth2Required) := FALSE;
    init(prod_at_consumer.nfService1.priority) := 0;
    init(prod_at_consumer.nfService1.serviceInstanceId) := none;
    init(prod_at_consumer.nfService1.serviceName) := none;
    init(prod_at_consumer.nfService1.serviceStatus) := none;
    init(prod_at_consumer.nfService1.sNssais[1]) := none;
    init(prod_at_consumer.nfService1.sNssais[2]) := none;
    init(prod_at_consumer.nfService1.allowedsNssais[1]) := none;
    init(prod_at_consumer.nfService1.allowedsNssais[2]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFInstances[1]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFInstances[2]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService1.operation1.opName) := none;
    init(prod_at_consumer.nfService1.operation1.opScope[1]) := none;
    init(prod_at_consumer.nfService1.operation1.opScope[2]) := none;
    init(prod_at_consumer.nfService1.operation1.param1.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation1.param1.name) := none;
    init(prod_at_consumer.nfService1.operation1.param1.value) := 0;
    init(prod_at_consumer.nfService1.operation1.param2.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation1.param2.name) := none;
    init(prod_at_consumer.nfService1.operation1.param2.value) := 0;
    init(prod_at_consumer.nfService1.operation2.allowedNFInstances[1]) := none;
    init(prod_at_consumer.nfService1.operation2.allowedNFInstances[2]) := none;
    init(prod_at_consumer.nfService1.operation2.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService1.operation2.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService1.operation2.opName) := none;
    init(prod_at_consumer.nfService1.operation2.opScope[1]) := none;
    init(prod_at_consumer.nfService1.operation2.opScope[2]) := none;
    init(prod_at_consumer.nfService1.operation2.param1.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation2.param1.name) := none;
    init(prod_at_consumer.nfService1.operation2.param1.value) := 0;
    init(prod_at_consumer.nfService1.operation2.param2.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation2.param2.name) := none;
    init(prod_at_consumer.nfService1.operation2.param2.value) := 0;
    init(prod_at_consumer.nfService2.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService2.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService2.load) := 0;
    init(prod_at_consumer.nfService2.capacity) := 0;
    init(prod_at_consumer.nfService2.oauth2Required) := FALSE;
    init(prod_at_consumer.nfService2.priority) := 0;
    init(prod_at_consumer.nfService2.serviceInstanceId) := none;
    init(prod_at_consumer.nfService2.serviceName) := none;
    init(prod_at_consumer.nfService2.serviceStatus) := none;
    init(prod_at_consumer.nfService2.sNssais[1]) := none;
    init(prod_at_consumer.nfService2.sNssais[2]) := none;
    init(prod_at_consumer.nfService2.allowedsNssais[1]) := none;
    init(prod_at_consumer.nfService2.allowedsNssais[2]) := none;
    init(prod_at_consumer.nfService2.operation1.allowedNFInstances[1]) := none;
    init(prod_at_consumer.nfService2.operation1.allowedNFInstances[2]) := none;
    init(prod_at_consumer.nfService2.operation1.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService2.operation1.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService2.operation1.opName) := none;
    init(prod_at_consumer.nfService2.operation1.opScope[1]) := none;
    init(prod_at_consumer.nfService2.operation1.opScope[2]) := none;
    init(prod_at_consumer.nfService2.operation1.param1.isSensitive) := FALSE;
    init(prod_at_consumer.nfService2.operation1.param1.name) := none;
    init(prod_at_consumer.nfService2.operation1.param1.value) := 0;
    init(prod_at_consumer.nfService2.operation1.param2.isSensitive) := FALSE;
    init(prod_at_consumer.nfService2.operation1.param2.name) := none;
    init(prod_at_consumer.nfService2.operation1.param2.value) := 0;
    init(prod_at_consumer.nfService2.operation2.allowedNFInstances[1]) := none;
    init(prod_at_consumer.nfService2.operation2.allowedNFInstances[2]) := none;
    init(prod_at_consumer.nfService2.operation2.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService2.operation2.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService2.operation2.opName) := none;
    init(prod_at_consumer.nfService2.operation2.opScope[1]) := none;
    init(prod_at_consumer.nfService2.operation2.opScope[2]) := none;
    init(prod_at_consumer.nfService2.operation2.param1.isSensitive) := FALSE;
    init(prod_at_consumer.nfService2.operation2.param1.name) := none;
    init(prod_at_consumer.nfService2.operation2.param1.value) := 0;
    init(prod_at_consumer.nfService2.operation2.param2.isSensitive) := FALSE;
    init(prod_at_consumer.nfService2.operation2.param2.name) := none;
    init(prod_at_consumer.nfService2.operation2.param2.value) := 0;

    next(prod_at_consumer.model_id) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.model_id;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.model_id;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.model_id;
        (isNFDiscovered1) : producer1.model_id;
        (isNFDiscovered2) : producer2.model_id;
        (isNFDiscovered3) : producer3.model_id;
        TRUE : prod_at_consumer.model_id;
    esac;
    next(prod_at_consumer.CCA_subject) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.CCA_subject;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.CCA_subject;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.CCA_subject;
        (isNFDiscovered1) : producer1.CCA_subject;
        (isNFDiscovered2) : producer2.CCA_subject;
        (isNFDiscovered3) : producer3.CCA_subject;
        TRUE : prod_at_consumer.CCA_subject;
    esac;
    next(prod_at_consumer.nfInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfInstanceId;
        (isNFDiscovered1) : producer1.nfInstanceId;
        (isNFDiscovered2) : producer2.nfInstanceId;
        (isNFDiscovered3) : producer3.nfInstanceId;
        TRUE : prod_at_consumer.nfInstanceId;
    esac;
    next(prod_at_consumer.nfType) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfType;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfType;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfType;
        (isNFDiscovered1) : producer1.nfType;
        (isNFDiscovered2) : producer2.nfType;
        (isNFDiscovered3) : producer3.nfType;
        TRUE : prod_at_consumer.nfType;
    esac;
    next(prod_at_consumer.nfStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.nfStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.nfStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.nfStatus;
        (isNFDiscovered1) : producer1.nfStatus;
        (isNFDiscovered2) : producer2.nfStatus;
        (isNFDiscovered3) : producer3.nfStatus;
        TRUE : prod_at_consumer.nfStatus;
    esac;
    next(prod_at_consumer.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.sNssais[1];
        (isNFDiscovered1) : producer1.sNssais[1];
        (isNFDiscovered2) : producer2.sNssais[1];
        (isNFDiscovered3) : producer3.sNssais[1];
        TRUE : prod_at_consumer.sNssais[1];
    esac;
    next(prod_at_consumer.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.sNssais[2];
        (isNFDiscovered1) : producer1.sNssais[2];
        (isNFDiscovered2) : producer2.sNssais[2];
        (isNFDiscovered3) : producer3.sNssais[2];
        TRUE : prod_at_consumer.sNssais[2];
    esac;
    next(prod_at_consumer.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.allowedNFTypes[1];
        (isNFDiscovered3) : producer3.allowedNFTypes[1];
        TRUE : prod_at_consumer.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.allowedNFTypes[2];
        (isNFDiscovered3) : producer3.allowedNFTypes[2];
        TRUE : prod_at_consumer.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedsNssais[1];
        (isNFDiscovered1) : producer1.allowedsNssais[1];
        (isNFDiscovered2) : producer2.allowedsNssais[1];
        (isNFDiscovered3) : producer3.allowedsNssais[1];
        TRUE : prod_at_consumer.allowedsNssais[1];
    esac;
    next(prod_at_consumer.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.allowedsNssais[2];
        (isNFDiscovered1) : producer1.allowedsNssais[2];
        (isNFDiscovered2) : producer2.allowedsNssais[2];
        (isNFDiscovered3) : producer3.allowedsNssais[2];
        TRUE : prod_at_consumer.allowedsNssais[2];
    esac;
    next(prod_at_consumer.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.load;
        (isNFDiscovered1) : producer1.load;
        (isNFDiscovered2) : producer2.load;
        (isNFDiscovered3) : producer3.load;
        TRUE : prod_at_consumer.load;
    esac;
    next(prod_at_consumer.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.capacity;
        (isNFDiscovered1) : producer1.capacity;
        (isNFDiscovered2) : producer2.capacity;
        (isNFDiscovered3) : producer3.capacity;
        TRUE : prod_at_consumer.capacity;
    esac;
    next(prod_at_consumer.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1) : producer1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2) : producer2.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3) : producer3.priority;
        (isNFDiscovered1) : producer1.priority;
        (isNFDiscovered2) : producer2.priority;
        (isNFDiscovered3) : producer3.priority;
        TRUE : prod_at_consumer.priority;
    esac;
    next(prod_at_consumer.nfService1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedNFTypes[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedNFTypes[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService1.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.load;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.load;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.load;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.load;
    esac;
    next(prod_at_consumer.nfService1.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.capacity;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.capacity;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.capacity;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.capacity;
    esac;
    next(prod_at_consumer.nfService1.oauth2Required) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.oauth2Required;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.oauth2Required;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.oauth2Required;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.oauth2Required;
    esac;
    next(prod_at_consumer.nfService1.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.priority;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.priority;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.priority;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.priority;
    esac;
    next(prod_at_consumer.nfService1.serviceInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceInstanceId;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.serviceInstanceId;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.serviceInstanceId;
    esac;
    next(prod_at_consumer.nfService1.serviceName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.serviceName;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.serviceName;
    esac;
    next(prod_at_consumer.nfService1.serviceStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceStatus;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceStatus;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.serviceStatus;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.serviceStatus;
    esac;
    next(prod_at_consumer.nfService1.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.sNssais[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.sNssais[1];
    esac;
    next(prod_at_consumer.nfService1.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.sNssais[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.sNssais[2];
    esac;
    next(prod_at_consumer.nfService1.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedsNssais[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedsNssais[1];
    esac;
    next(prod_at_consumer.nfService1.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.allowedsNssais[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedsNssais[2];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService1.operation1.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.opName;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.opName;
    esac;
    next(prod_at_consumer.nfService1.operation1.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.opScope[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.opScope[1];
    esac;
    next(prod_at_consumer.nfService1.operation1.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.opScope[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.opScope[2];
    esac;
    next(prod_at_consumer.nfService1.operation1.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation1.param1.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation1.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param1.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.param1.name;
    esac;
    next(prod_at_consumer.nfService1.operation1.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param1.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation1.param1.value;
    esac;
    next(prod_at_consumer.nfService1.operation1.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation1.param2.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation1.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param2.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.param2.name;
    esac;
    next(prod_at_consumer.nfService1.operation1.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation1.param2.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation1.param2.value;
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService1.operation2.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.opName;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.opName;
    esac;
    next(prod_at_consumer.nfService1.operation2.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.opScope[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.opScope[1];
    esac;
    next(prod_at_consumer.nfService1.operation2.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.opScope[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.opScope[2];
    esac;
    next(prod_at_consumer.nfService1.operation2.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation2.param1.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation2.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param1.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.param1.name;
    esac;
    next(prod_at_consumer.nfService1.operation2.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param1.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation2.param1.value;
    esac;
    next(prod_at_consumer.nfService1.operation2.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation2.param2.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation2.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param2.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.param2.name;
    esac;
    next(prod_at_consumer.nfService1.operation2.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService1.serviceName}) : producer3.nfService1.operation2.param2.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation2.param2.value;
    esac;
    next(prod_at_consumer.nfService2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedNFTypes[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedNFTypes[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService2.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.load;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.load;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.load;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.load;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        TRUE : prod_at_consumer.nfService2.load;
    esac;
    next(prod_at_consumer.nfService2.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.capacity;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.capacity;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.capacity;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        TRUE : prod_at_consumer.nfService2.capacity;
    esac;
    next(prod_at_consumer.nfService2.oauth2Required) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.oauth2Required;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.oauth2Required;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.oauth2Required;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService2.oauth2Required;
    esac;
    next(prod_at_consumer.nfService2.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.priority;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.priority;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.priority;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.priority;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        TRUE : prod_at_consumer.nfService2.priority;
    esac;
    next(prod_at_consumer.nfService2.serviceInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.serviceInstanceId;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.serviceInstanceId;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.serviceInstanceId;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.serviceInstanceId;
    esac;
    next(prod_at_consumer.nfService2.serviceName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.serviceName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.serviceName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.serviceName;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.serviceName;
    esac;
    next(prod_at_consumer.nfService2.serviceStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.serviceStatus;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.serviceStatus;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.serviceStatus;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.serviceStatus;
    esac;
    next(prod_at_consumer.nfService2.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.sNssais[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.sNssais[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.sNssais[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.sNssais[1];
    esac;
    next(prod_at_consumer.nfService2.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.sNssais[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.sNssais[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.sNssais[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.sNssais[2];
    esac;
    next(prod_at_consumer.nfService2.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedsNssais[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedsNssais[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedsNssais[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.allowedsNssais[1];
    esac;
    next(prod_at_consumer.nfService2.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.allowedsNssais[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.allowedsNssais[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.allowedsNssais[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.allowedsNssais[2];
    esac;
    next(prod_at_consumer.nfService2.operation1.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFInstances[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.allowedNFInstances[1];
    esac;
    next(prod_at_consumer.nfService2.operation1.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFInstances[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.allowedNFInstances[2];
    esac;
    next(prod_at_consumer.nfService2.operation1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFTypes[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService2.operation1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.allowedNFTypes[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService2.operation1.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.opName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.opName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.opName;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.opName;
    esac;
    next(prod_at_consumer.nfService2.operation1.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.opScope[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.opScope[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.opScope[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.opScope[1];
    esac;
    next(prod_at_consumer.nfService2.operation1.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.opScope[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.opScope[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.opScope[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.opScope[2];
    esac;
    next(prod_at_consumer.nfService2.operation1.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param1.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService2.operation1.param1.isSensitive;
    esac;
    next(prod_at_consumer.nfService2.operation1.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param1.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param1.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param1.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.param1.name;
    esac;
    next(prod_at_consumer.nfService2.operation1.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param1.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param1.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param1.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        TRUE : prod_at_consumer.nfService2.operation1.param1.value;
    esac;
    next(prod_at_consumer.nfService2.operation1.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param2.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService2.operation1.param2.isSensitive;
    esac;
    next(prod_at_consumer.nfService2.operation1.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param2.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param2.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param2.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation1.param2.name;
    esac;
    next(prod_at_consumer.nfService2.operation1.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation1.param2.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation1.param2.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation1.param2.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        TRUE : prod_at_consumer.nfService2.operation1.param2.value;
    esac;
    next(prod_at_consumer.nfService2.operation2.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFInstances[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.allowedNFInstances[1];
    esac;
    next(prod_at_consumer.nfService2.operation2.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFInstances[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.allowedNFInstances[2];
    esac;
    next(prod_at_consumer.nfService2.operation2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFTypes[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService2.operation2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.allowedNFTypes[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService2.operation2.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.opName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.opName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.opName;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.opName;
    esac;
    next(prod_at_consumer.nfService2.operation2.opScope[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.opScope[1];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.opScope[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.opScope[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.opScope[1];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.opScope[1];
    esac;
    next(prod_at_consumer.nfService2.operation2.opScope[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.opScope[2];
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.opScope[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.opScope[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.opScope[2];
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.opScope[2];
    esac;
    next(prod_at_consumer.nfService2.operation2.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param1.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService2.operation2.param1.isSensitive;
    esac;
    next(prod_at_consumer.nfService2.operation2.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param1.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param1.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param1.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.param1.name;
    esac;
    next(prod_at_consumer.nfService2.operation2.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param1.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param1.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param1.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        TRUE : prod_at_consumer.nfService2.operation2.param1.value;
    esac;
    next(prod_at_consumer.nfService2.operation2.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : FALSE;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param2.isSensitive;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService2.operation2.param2.isSensitive;
    esac;
    next(prod_at_consumer.nfService2.operation2.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param2.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param2.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : none;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param2.name;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : none;
        TRUE : prod_at_consumer.nfService2.operation2.param2.name;
    esac;
    next(prod_at_consumer.nfService2.operation2.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & isNFDiscovered3 & selectProducer = 3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService2.serviceName}) : producer1.nfService2.operation2.param2.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService2.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService2.serviceName}) : producer2.nfService2.operation2.param2.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService2.serviceName) : 0;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName in {none, producer3.nfService2.serviceName}) : producer3.nfService2.operation2.param2.value;
        (isNFDiscovered3 & nfDiscoveryRequest.serviceName != producer3.nfService2.serviceName) : 0;
        TRUE : prod_at_consumer.nfService2.operation2.param2.value;
    esac;

---------- begin AccessToken init ----------
    init(accessToken.sub) := none;
    init(accessToken.aud_NFInstanceId) := none;
    init(accessToken.aud_NFType) := none;
    init(accessToken.scopeService) := none;
    init(accessToken.scopeOperation) := none;
    init(accessToken.exp_) := TRUE;
    init(accessToken.producerSnssaiList[1]) := none;
    init(accessToken.producerSnssaiList[2]) := none;


    next(accessToken.sub) := case
        isAccessTokenReqAuthorized : accessTokenRequest.nfInstanceId;
        TRUE :  accessToken.sub;
    esac;
    next(accessToken.aud_NFInstanceId) := case 
        isAccessTokenReqAuthorized & reqForSpecificProducer : accessTokenRequest.targetNfInstanceId;
        isAccessTokenReqAuthorized & !reqForSpecificProducer : none;
        TRUE :  accessToken.aud_NFInstanceId;
    esac;
    next(accessToken.aud_NFType) := case 
        isAccessTokenReqAuthorized & reqForSpecificProducer : none;
        isAccessTokenReqAuthorized & !reqForSpecificProducer : accessTokenRequest.targetNFType;
        TRUE :  accessToken.aud_NFType;
    esac;
    next(accessToken.scopeService) := case 
        isAccessTokenReqAuthorized : accessTokenRequest.scopeService; -- different from other rules
        TRUE :  accessToken.scopeService;
    esac;
    -- next(accessToken.scopeOpName) := case 
    --     isAccessTokenReqAuthorized : accessTokenRequest.scopeOpName;
    --     TRUE :  accessToken.scopeOpName;
    -- esac;
    next(accessToken.scopeOperation) := case 
        isAccessTokenReqAuthorized & isOpLevelATReqAuthorized: accessTokenRequest.scopeOperation; -- different from other rules
        TRUE :  accessToken.scopeOperation;
    esac;
    -- TODO need further check
    next(accessToken.exp_) := case 
        isAccessTokenReqAuthorized : FALSE;
        !(accessToken.exp_) : {TRUE, FALSE}; -- different from other rules
        TRUE : accessToken.exp_; -- Expired
    esac;
    next(accessToken.producerSnssaiList[1]) := case 
        disableOptionalParams_AT: none;
        isAccessTokenReqAuthorized & reqForSpecificProducer: producer.sNssais[1];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer1 & !reqForSpecificProducer: producer1.sNssais[1];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer2 & !reqForSpecificProducer: producer2.sNssais[1];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer3 & !reqForSpecificProducer: producer3.sNssais[1];
        TRUE :  accessToken.producerSnssaiList[1];
    esac;
    next(accessToken.producerSnssaiList[2]) := case 
        disableOptionalParams_AT: none;
        isAccessTokenReqAuthorized & reqForSpecificProducer: producer.sNssais[2];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer1 & !reqForSpecificProducer: producer1.sNssais[2];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer2 & !reqForSpecificProducer: producer2.sNssais[2];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer3 & !reqForSpecificProducer: producer3.sNssais[2];
        TRUE :  accessToken.producerSnssaiList[2];
    esac;
---------- begin AccessTokenRequest init ----------
    init(accessTokenRequest.grantType) := none;
    init(accessTokenRequest.nfInstanceId) := none;
    init(accessTokenRequest.scopeService) := none;
    init(accessTokenRequest.scopeOperation) := none;
    init(accessTokenRequest.targetNFType) := none;
    init(accessTokenRequest.targetNfInstanceId) := none;
    init(accessTokenRequest.targetSnssaiList) := none;

---------- begin AccessTokenRequest next ----------
    next(accessTokenRequest.grantType) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, client_credentials};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : client_credentials;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : client_credentials;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : client_credentials;
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : client_credentials;
        TRUE: none;
    esac;
    next(accessTokenRequest.nfInstanceId) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3, 4, 5};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : consumer.nfInstanceId;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : consumer.nfInstanceId;
        TRUE: none;
    esac;
    next(accessTokenRequest.scopeService) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : {none, prod_at_consumer.nfService1.serviceName, prod_at_consumer.nfService2.serviceName};
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : {none, prod_at_consumer.nfService1.serviceName, prod_at_consumer.nfService2.serviceName};
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        TRUE: none;
    esac;
    next(accessTokenRequest.scopeOperation) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : {none, prod_at_consumer.nfService1.operation1.opScope[2], prod_at_consumer.nfService1.operation2.opScope[2], prod_at_consumer.nfService2.operation1.opScope[2], prod_at_consumer.nfService2.operation2.opScope[2]};
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : {none, prod_at_consumer.nfService1.operation1.opScope[2], prod_at_consumer.nfService1.operation2.opScope[2], prod_at_consumer.nfService2.operation1.opScope[2], prod_at_consumer.nfService2.operation2.opScope[2]};
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, namf_comm, nudm-uecm_amf-registration_write, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm-sdm, nudm_sdm, nsmf-event-exposure};
        TRUE: none;
    esac;
    next(accessTokenRequest.targetNFType) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : none;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : none;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, AUSF, SMF, AMF, UDM, NSSF, NEF, PCF, UPF, AF_};
        TRUE: none;
    esac;
    next(accessTokenRequest.targetNfInstanceId) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3, 4, 5};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : prod_at_consumer.nfInstanceId;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : prod_at_consumer.nfInstanceId;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : none;
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : none;
        TRUE: none;
    esac;
    next(accessTokenRequest.targetSnssaiList) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : none;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : none;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, 1, 2, 3};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, 1, 2, 3};
        TRUE: none;
    esac;

---------- begin ServiceRequest init ----------
    init(serviceRequest.subjectID) := none;
    init(serviceRequest.audienceID) := none;
    init(serviceRequest.service) := none;
    init(serviceRequest.operation) := none;
    init(serviceRequest.sNssais) := none;

---------- begin ServiceRequest next ----------
    next(serviceRequest.subjectID) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, 1, 2, 3, 4, 5};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : consumer.nfInstanceId;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : consumer.nfInstanceId;
        TRUE: serviceRequest.subjectID;
    esac;
    next(serviceRequest.audienceID) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, 1, 2, 3, 4, 5};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : producer.nfInstanceId;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : producer.nfInstanceId;
        TRUE: serviceRequest.audienceID;
    esac;
    next(serviceRequest.service) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, namf_comm, Nudm_UECM, Nsmf_PDUSession, namf_loc, nudm_sdm, nsmf-event-exposure};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : {none, prod_at_consumer.nfService1.serviceName, prod_at_consumer.nfService2.serviceName};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : {none, prod_at_consumer.nfService1.serviceName, prod_at_consumer.nfService2.serviceName};
        TRUE: serviceRequest.service;
    esac;
    next(serviceRequest.operation) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, GetIndividualSubcription, ProvideLocationInfo, CreateIndividualSubcription, ReleaseUEContext, GetSharedData, GetDataSets, _3GppRegistration, PostSmContexts, RetrieveSmContext, CreateUEContext, GetLocationInfo};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : {none, prod_at_consumer.nfService1.operation1.opName, prod_at_consumer.nfService1.operation2.opName, prod_at_consumer.nfService2.operation1.opName, prod_at_consumer.nfService2.operation2.opName};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : {none, prod_at_consumer.nfService1.operation1.opName, prod_at_consumer.nfService1.operation2.opName, prod_at_consumer.nfService2.operation1.opName, prod_at_consumer.nfService2.operation2.opName};
        TRUE: serviceRequest.operation;
    esac;
    next(serviceRequest.sNssais) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, 1, 2, 3};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : {consumer.sNssais[1],consumer.sNssais[2]};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : {consumer.sNssais[1],consumer.sNssais[2]};
        TRUE: serviceRequest.sNssais;
    esac;

